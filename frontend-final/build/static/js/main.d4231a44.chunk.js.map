{"version":3,"sources":["SpotifyPlayer.js","home.js","voicecommand.js","SpotifyLogin.js","Callback.js","Recommendations.js","Myplaylists.js","App.js","reportWebVitals.js","index.js"],"names":["SpotifyPlayer","player","setPlayer","useState","deviceId","setDeviceId","error","setError","useEffect","token","localStorage","getItem","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","newPlayer","Spotify","Player","name","getOAuthToken","cb","volume","addListener","_ref","device_id","console","log","setItem","fetch","method","headers","Authorization","JSON","stringify","device_ids","play","_ref2","message","_ref3","_ref4","_ref5","connect","React","style","padding","backgroundColor","color","Fragment","marginTop","onClick","handlePrevious","handlePlay","handlePause","handleNext","Home","mood","setMood","playlist","setPlaylist","setMessage","playlistName","setPlaylistName","isListening","setIsListening","isNaming","setIsNaming","recommendations","setRecommendations","username","alert","location","href","ensureValidToken","expiryTime","now","Date","Number","refreshToken","res","axios","post","refresh_token","access_token","data","err","refreshSpotifyToken","fetchPlaylist","trim","_response$data","_response$data$playli","spotifyToken","userId","payload","charAt","toUpperCase","slice","songs","createdByVoice","voiceCommand","response","_err$response","_err$response$data","playTrack","uris","uri","className","background","marginRight","role","aria-label","handleLogout","removeItem","type","placeholder","value","onChange","e","target","startListening","SpeechRecognition","webkitSpeechRecognition","recognition","lang","onstart","onresult","transcript","event","results","predictedMood","classifyMood","onerror","onend","start","disabled","map","track","index","key","marginBottom","display","alignItems","albumImage","alt","width","height","borderRadius","flex","url","rel","textDecoration","artist","spotify_uri","length","startNamingByVoice","marginLeft","spotifyUserId","_track$url","match","filter","Boolean","_created$external_url","createRes","description","public","created","json","ok","id","open","external_urls","spotify","_topTracksData$items","getValidSeedTracks","trackIds","valid","tracks","push","warn","status","topTracksRes","topTracksText","text","topTracksData","parse","rawSeedTracks","items","validSeedTracks","recRes","join","recText","recData","Array","isArray","_track$artists$","_track$album$images$","artists","album","images","VoiceCommand","onMoodDetected","startRecognition","interimResults","SpotifyLogin","REDIRECT_URI","hostname","SCOPES","textAlign","clear","codeVerifier","arguments","undefined","possible","i","Math","floor","random","generateCodeVerifier","codeChallenge","TextEncoder","encode","digest","crypto","subtle","btoa","String","fromCharCode","Uint8Array","replace","generateCodeChallenge","args","URLSearchParams","response_type","client_id","scope","redirect_uri","code_challenge_method","code_challenge","toString","Callback","navigate","useNavigate","code","search","get","exchangeRes","code_verifier","expiresIn","expires_in","expiresAt","profileRes","profile","email","display_name","moodifyRes","exchangeToken","Recommendations","rawSeeds","getValidSeeds","seeds","_data$tracks","fetchRecommendations","verticalAlign","MyPlaylists","playlists","setPlaylists","loading","setLoading","fetchUserPlaylists","borderBottom","paddingBottom","isoString","date","toLocaleDateString","toLocaleTimeString","formatDate","createdAt","song","delete","playlistId","p","_id","handleDelete","border","confirm","App","Router","Routes","Route","path","element","Myplaylists","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"0RAqLeA,MAvGOA,KACpB,MAAOC,EAAQC,GAAaC,mBAAS,OAC9BC,EAAUC,GAAeF,mBAAS,OAClCG,EAAOC,GAAYJ,mBAAS,MAEnCK,oBAAU,KACR,MAAMC,EAAQC,aAAaC,QAAQ,iBACnC,IAAKF,EAAO,OAEZ,MAAMG,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAM,wCACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,GAE1BO,OAAOC,6BAA+B,KACpC,MAAMC,EAAY,IAAIF,OAAOG,QAAQC,OAAO,CAC1CC,KAAM,iBACNC,cAAeC,GAAMA,EAAGjB,GACxBkB,OAAQ,KAGVN,EAAUO,YAAY,QAASC,IAAoB,IAAnB,UAAEC,GAAWD,EAC3CE,QAAQC,IAAI,8CAA0CF,GACtDpB,aAAauB,QAAQ,YAAaH,GAClCzB,EAAYyB,GAGZI,MAAM,uCAAwC,CAC5CC,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAU5B,EACzB,eAAgB,oBAElBQ,KAAMqB,KAAKC,UAAU,CAAEC,WAAY,CAACV,GAAYW,MAAM,QAI1DpB,EAAUO,YAAY,uBAAwBc,IAAA,IAAC,QAAEC,GAASD,EAAA,OAAKnC,EAASoC,KACxEtB,EAAUO,YAAY,uBAAwBgB,IAAA,IAAC,QAAED,GAASC,EAAA,OAAKrC,EAASoC,KACxEtB,EAAUO,YAAY,gBAAiBiB,IAAA,IAAC,QAAEF,GAASE,EAAA,OAAKtC,EAAS,4CACjEc,EAAUO,YAAY,iBAAkBkB,IAAA,IAAC,QAAEH,GAASG,EAAA,OAAKvC,EAASoC,KAElEtB,EAAU0B,UACV7C,EAAUmB,KAEX,IAGH,MAAMZ,EAAQC,aAAaC,QAAQ,iBAiCnC,OACEqC,IAAAlC,cAAA,OAAKmC,MAAO,CAAEC,QAAS,OAAQC,gBAAiB,OAAQC,MAAO,SAC7DJ,IAAAlC,cAAA,SAAG,iDACFR,EACC0C,IAAAlC,cAAA,KAAGmC,MAAO,CAAEG,MAAO,QAAS,gBAAI9C,GAC9BF,EACF4C,IAAAlC,cAAAkC,IAAAK,SAAA,KACEL,IAAAlC,cAAA,SAAG,cAAYV,GACf4C,IAAAlC,cAAA,OAAKmC,MAAO,CAAEK,UAAW,SACvBN,IAAAlC,cAAA,UAAQyC,QAhBKC,KACrBtB,MAAM,gDAAiD,CACrDC,OAAQ,OACRC,QAAS,CAAEC,cAAe,UAAU5B,OAaG,gBACjCuC,IAAAlC,cAAA,UAAQyC,QAzCCE,KACL/C,aAAaC,QAAQ,YAAjC,MACMP,EAAWM,aAAaC,QAAQ,aACtCuB,MAAM,uDAAuD9B,EAAY,CACvE+B,OAAQ,MACRC,QAAS,CAAEC,cAAe,UAAU5B,GACpCQ,KAAMqB,KAAKC,UAAU,QAmCc,gBAC7BS,IAAAlC,cAAA,UAAQyC,QAhCEG,KAClBxB,MAAM,6CAA8C,CAClDC,OAAQ,MACRC,QAAS,CAAEC,cAAe,UAAU5B,OA6BA,gBAC9BuC,IAAAlC,cAAA,UAAQyC,QA1BCI,KACjBzB,MAAM,4CAA6C,CACjDC,OAAQ,OACRC,QAAS,CAAEC,cAAe,UAAU5B,OAuBD,kBAIjCuC,IAAAlC,cAAA,SAAG,8BC+aI8C,MArkBFA,KACX,MAAOC,EAAMC,GAAW3D,mBAAS,KAC1B4D,EAAUC,GAAe7D,mBAAS,KAClCwC,EAASsB,GAAc9D,mBAAS,KAChC+D,EAAcC,GAAmBhE,mBAAS,KAC1CiE,EAAaC,GAAkBlE,oBAAS,IACxCmE,EAAUC,GAAepE,oBAAS,IAClCqE,EAAiBC,GAAsBtE,mBAAS,IAEjDuE,EAAWhE,aAAaC,QAAQ,YAEtCH,oBAAU,KACaE,aAAaC,QAAQ,mBAExCgE,MAAM,2CACNxD,OAAOyD,SAASC,KAAO,MAExB,IAEH,MAAMC,EAAmB9D,UACvB,IAAIP,EAAQC,aAAaC,QAAQ,iBACjC,MAAMoE,EAAarE,aAAaC,QAAQ,4BAClCqE,EAAMC,KAAKD,MAKjB,QAHKvE,IAAUsE,GAAcC,GAAOE,OAAOH,MACzCtE,QA5CNO,iBACE,MAAMmE,EAAezE,aAAaC,QAAQ,yBAE1C,IACE,MAAMyE,QAAYC,IAAMC,KACtB,0EACA,CAAEC,cAAeJ,KAGb,aAAEK,GAAiBJ,EAAIK,KAE7B,OADA/E,aAAauB,QAAQ,gBAAiBuD,GAC/BA,EACP,MAAOE,GACP3D,QAAQzB,MAAM,2BAA4BoF,GAC1Cf,MAAM,iDACNxD,OAAOyD,SAASC,KAAO,KA6BPc,IAETlF,GAGHmF,EAAgB5E,UACpB,GAAK6C,EAAKgC,OAKV,IAAK,IAADC,EAAAC,EACF,MAAMtF,EAAQC,aAAaC,QAAQ,SAC7BqF,QAAqBlB,IACrBmB,EAASvF,aAAaC,QAAQ,WAG9BuF,EAAU,CACd1E,KAAM,aAAaqC,EAAKsC,OAAO,GAAGC,cAAgBvC,EAAKwC,MAAM,WAC7DC,MAAO,GACPzC,OACA0C,gBAAgB,EAChBC,aAAc,GACdP,UAGFlE,QAAQC,IAAI,wCAAyCkE,GAErD,MAAMO,QAAiBpB,IAAMC,KAC3B,yEACAY,EACA,CACE9D,QAAS,CACPC,cAAe,UAAU5B,EACzB,kBAAmBuF,KAKzBjE,QAAQC,IAAI,qBAAsByE,EAAShB,MAC3CzB,GAAyB,QAAb8B,EAAAW,EAAShB,YAAI,IAAAK,GAAU,QAAVC,EAAbD,EAAe/B,gBAAQ,IAAAgC,OAAV,EAAbA,EAAyBO,QAAS,IAC9CrC,EAAW,IACX,MAAOyB,GAAM,IAADgB,EAAAC,EACZ5E,QAAQzB,MAAM,6BAA8BoF,EAAIe,UAAYf,GAC5DzB,GAAuB,QAAZyC,EAAAhB,EAAIe,gBAAQ,IAAAC,GAAM,QAANC,EAAZD,EAAcjB,YAAI,IAAAkB,OAAN,EAAZA,EAAoBrG,QAAS,qCArCxC2D,EAAW,+BA0HT2C,EAAY5F,UAChB,MAAMP,EAAQC,aAAaC,QAAQ,iBAC7BP,EAAWM,aAAaC,QAAQ,aACtC,GAAKF,GAAUL,EAIf,UACQ8B,MAAM,uDAAuD9B,EAAY,CAC7E+B,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAU5B,EACzB,eAAgB,oBAElBQ,KAAMqB,KAAKC,UAAU,CAAEsE,KAAM,CAACC,OAEhC,MAAOpB,GACP3D,QAAQzB,MAAM,uBAAwBoF,GACtCf,MAAM,kEAdNA,MAAM,8BAqIV,OACE3B,IAAAlC,cAAA,OAAKiG,UAAU,aACb/D,IAAAlC,cAACd,EAAa,MAGdgD,IAAAlC,cAAA,OAAKmC,MAAO,CAAE+D,WAAY,UAAW9D,QAAS,SAC5CF,IAAAlC,cAAA,KAAG+D,KAAK,QAAQ5B,MAAO,CAAEG,MAAO,OAAQ6D,YAAa,SAAU,QAG/DjE,IAAAlC,cAAA,KAAG+D,KAAK,mBAAmB5B,MAAO,CAAEG,MAAO,OAAQ6D,YAAa,SAAU,mBAG1EjE,IAAAlC,cAAA,KAAG+D,KAAK,aAAa5B,MAAO,CAAEG,MAAO,SAAU,iBAKjDJ,IAAAlC,cAAA,UAAI,uBACH4D,GACC1B,IAAAlC,cAAA,UAAI,sCACkC,IACpCkC,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,aAAY,iBAK5CnE,IAAAlC,cAAA,UAAQyC,QAlCS6D,KACnB1G,aAAa2G,WAAW,SACxB3G,aAAa2G,WAAW,YACxB3G,aAAa2G,WAAW,iBACxB3G,aAAa2G,WAAW,WACxBlG,OAAOyD,SAASC,KAAO,WA6BU,UAE/B7B,IAAAlC,cAAA,WACEkC,IAAAlC,cAAA,UAAI,qBACJkC,IAAAlC,cAAA,SACEwG,KAAK,OACLC,YAAY,qCACZC,MAAO3D,EACP4D,SAAWC,GAAM5D,EAAQ4D,EAAEC,OAAOH,SAEpCxE,IAAAlC,cAAA,UAAQyC,QAASA,IAAMqC,EAAc/B,IAAO,sBAG9Cb,IAAAlC,cAAA,WACEkC,IAAAlC,cAAA,UAAQyC,QA3PSqE,KACrB,IACE,MAAMC,EACJ1G,OAAO0G,mBAAqB1G,OAAO2G,wBACrC,IAAKD,EAEH,YADA5D,EAAW,wDAIb,MAAM8D,EAAc,IAAIF,EACxBE,EAAYC,KAAO,QAEnBD,EAAYE,QAAU,IAAM5D,GAAe,GAE3C0D,EAAYG,SAAWlH,UACrB,MAAMmH,EAAaC,EAAMC,QAAQ,GAAG,GAAGF,WACvCrE,EAAQqE,GAGR,MAAMG,OAvBStH,UACZmH,EAAWtC,OAsBc0C,CAAaJ,GACpCG,EAKL1C,EAAc0C,GAJZrE,EAAW,yCAOf8D,EAAYS,QAAWJ,IACrBrG,QAAQzB,MAAM,4BAA6B8H,GAC3CnE,EAAW,6BAA6BmE,EAAM9H,QAGhDyH,EAAYU,MAAQ,IAAMpE,GAAe,GAEzC0D,EAAYW,QACZ,MAAOhD,GACP3D,QAAQzB,MAAM,6BAA8BoF,GAC5CzB,EAAW,kDAqNwB0E,SAAUvE,GACxCA,EAAc,eAAiB,oBAIpCpB,IAAAlC,cAAA,UAAI,aACH6B,GAAWK,IAAAlC,cAAA,SAAI6B,GAChBK,IAAAlC,cAAA,UACGiD,EAAS6E,IAAI,CAACC,EAAOC,IACpB9F,IAAAlC,cAAA,MACEiI,IAAKD,EACL7F,MAAO,CACL+F,aAAc,OACdC,QAAS,OACTC,WAAY,WAGbL,EAAMM,YACLnG,IAAAlC,cAAA,OACEC,IAAK8H,EAAMM,WACXC,IAAI,cACJC,MAAM,KACNC,OAAO,KACPrG,MAAO,CAAEsG,aAAc,MAAOtC,YAAa,UAG/CjE,IAAAlC,cAAA,OAAKmC,MAAO,CAAEuG,KAAM,IAClBxG,IAAAlC,cAAA,KACE+D,KAAMgE,EAAMY,IACZ9B,OAAO,SACP+B,IAAI,sBACJzG,MAAO,CAAE0G,eAAgB,OAAQvG,MAAO,YAEvCyF,EAAMrH,KAAK,IAACwB,IAAAlC,cAAA,QAAMmC,MAAO,CAAEG,MAAO,SAAU,UAAGyF,EAAMe,SAEvDf,EAAMgB,aACL7G,IAAAlC,cAAA,WACEkC,IAAAlC,cAAA,UAAQyC,QAASA,IAAMqD,EAAUiC,EAAMgB,aAAc5G,MAAO,CAAEK,UAAW,QAAS,qCAU7FS,EAAS+F,OAAS,GACjB9G,IAAAlC,cAAAkC,IAAAK,SAAA,KACEL,IAAAlC,cAAA,SACEwG,KAAK,OACLC,YAAY,kCACZC,MAAOtD,EACPuD,SAAWC,GAAMvD,EAAgBuD,EAAEC,OAAOH,OAC1CvE,MAAO,CAAEK,UAAW,OAAQJ,QAAS,MAAOmG,MAAO,SAErDrG,IAAAlC,cAAA,UACEyC,QA1QiBwG,KACzB,IACE,MAAMlC,EACJ1G,OAAO0G,mBAAqB1G,OAAO2G,wBACrC,IAAKD,EAEH,YADA5D,EAAW,wDAIb,MAAM8D,EAAc,IAAIF,EACxBE,EAAYC,KAAO,QACnBD,EAAYW,QAEZX,EAAYE,QAAU,IAAM1D,GAAY,GAExCwD,EAAYG,SAAYE,IACtB,MAAMD,EAAaC,EAAMC,QAAQ,GAAG,GAAGF,WACvChE,EAAgBgE,IAGlBJ,EAAYS,QAAWJ,IACrBrG,QAAQzB,MAAM,sBAAuB8H,GACrCnE,EAAW,uBAAuBmE,EAAM9H,QAG1CyH,EAAYU,MAAQ,IAAMlE,GAAY,GACtC,MAAOmB,GACP3D,QAAQzB,MAAM,uBAAwBoF,GACtCzB,EAAW,4CA+OL0E,SAAUrE,EACVrB,MAAO,CAAE+G,WAAY,OAAQ9G,QAAS,QACvC,gBACKoB,EAAW,eAAiB,iBAGlCtB,IAAAlC,cAAA,WACAkC,IAAAlC,cAAA,UAAQyC,QA5NKvC,UACnB,MAAMP,EAAQC,aAAaC,QAAQ,SAC7BsF,EAASvF,aAAaC,QAAQ,WAEpC,GAAKoD,EAAS+F,OAKd,UACQzE,IAAMC,KACV,qEACA,CACE9D,KAAM0C,EACNoC,MAAOvC,EACPF,OACAoC,UAEF,CACE7D,QAAS,CACPC,cAAe,UAAU5B,KAK/BkE,MAAM,gCACNR,EAAgB,IAChB,MAAOuB,GACP3D,QAAQzB,MAAM,2BAA4BoF,GAC1Cf,MAAM,iCAxBNA,MAAM,sCAuN6B1B,MAAO,CAAEK,UAAW,SACjDN,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,QAAO,gBAE3B,IAAI,sBAIdnE,IAAAlC,cAAA,WACAkC,IAAAlC,cAAA,UAAQyC,QAnMMvC,UACpB,MAAMP,EAAQC,aAAaC,QAAQ,iBAC7BsJ,EAAgBvJ,aAAaC,QAAQ,mBAE3C,IAAKuD,GAAoC,IAApBH,EAAS+F,OAE5B,YADAnF,MAAM,8CAKR5C,QAAQC,IAAI,+CAAsC+B,GAElD,MAAM8C,EAAO9C,EACV6E,IAAKC,IAAW,IAADqB,EACd,MAAMC,EAAiB,QAAZD,EAAGrB,EAAMY,WAAG,IAAAS,OAAA,EAATA,EAAWC,MAAM,yBAC/B,OAAOA,EAAQ,iBAAiBA,EAAM,GAAO,OAE9CC,OAAOC,SAKV,GAFAtI,QAAQC,IAAI,+BAAsB6E,GAEd,IAAhBA,EAAKiD,OAKT,IAAK,IAADQ,EAEF,MAAMC,QAAkBrI,MACtB,oCAAoC+H,cACpC,CACE9H,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAU5B,EACzB,eAAgB,oBAElBQ,KAAMqB,KAAKC,UAAU,CACnBf,KAAM0C,EACNsG,YAAa,oCACbC,QAAQ,MAKRC,QAAgBH,EAAUI,OAEhC,IAAKJ,EAAUK,KAAOF,EAAQG,GAG5B,OAFA9I,QAAQzB,MAAM,oCAAqCoK,QACnD/F,MAAM,2CAKFzC,MACJ,wCAAwCwI,EAAQG,YAChD,CACE1I,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAU5B,EACzB,eAAgB,oBAElBQ,KAAMqB,KAAKC,UAAU,CAAEsE,WAI3BlC,MAAM,kDACNxD,OAAO2J,MAA0B,QAArBR,EAAAI,EAAQK,qBAAa,IAAAT,OAAA,EAArBA,EAAuBU,UAAW,2BAA4B,UAC1E,MAAOtF,GACP3D,QAAQzB,MAAM,oCAAgCoF,GAC9Cf,MAAM,4CA/CNA,MAAM,wDA4K8B1B,MAAO,CAAEK,UAAW,SAAU,iCAMlEN,IAAAlC,cAAA,UAAI,uBACJkC,IAAAlC,cAAA,UACEyC,QAASvC,UACP,IAAK,IAADiK,EACF,MAAMxK,EAAQC,aAAaC,QAAQ,iBAG7BuK,EAAqBlK,MAAOmK,EAAU1K,KAC1C,MAAM2K,EAAQ,GAEd,IAAK,MAAMP,KAAMM,EAAU,CACzB,MAAM/F,QAAYlD,MAChB,0DAA0D2I,YAC1D,CACEzI,QAAS,CAAEC,cAAe,UAAU5B,KAIxC,GAAI2E,EAAIwF,GAAI,CACV,MAAMnF,QAAaL,EAAIuF,OACnBlF,EAAK4F,QAAU5F,EAAK4F,OAAOvB,OAAS,EACtCsB,EAAME,KAAKT,GAEX9I,QAAQwJ,KAAK,mDAAyCV,QAGxD9I,QAAQwJ,KAAK,+CAA0CV,cAAezF,EAAIoG,UAG5E,GAAIJ,EAAMtB,QAAU,EAAG,MAGzB,OAAOsB,GAIHK,QAAqBvJ,MAAM,mDAAoD,CACnFE,QAAS,CAAEC,cAAe,UAAU5B,KAGhCiL,QAAsBD,EAAaE,OAEzC,IAAKF,EAAab,GAGhB,OAFA7I,QAAQzB,MAAM,kCAA8BmL,EAAaD,OAAQE,QACjEzH,EAAW,+BAIb,IAAI2H,EACJ,IACEA,EAAgBtJ,KAAKuJ,MAAMH,GAC3B,MAAOhE,GAGP,OAFA3F,QAAQzB,MAAM,0CAAsCoH,EAAGgE,QACvDzH,EAAW,0CAIb,MAAM6H,GAAmC,QAAnBb,EAAAW,EAAcG,aAAK,IAAAd,OAAA,EAAnBA,EAAqBrC,IAAKC,GAAUA,EAAMgC,MAAO,GAGvE,GAFA9I,QAAQC,IAAI,gCAAuB8J,GAEN,IAAzBA,EAAchC,OAEhB,YADA7F,EAAW,gEAKb,MAAM+H,QAAwBd,EAAmBY,EAAerL,GAGhE,GAFAsB,QAAQC,IAAI,qCAAiCgK,GAEd,IAA3BA,EAAgBlC,OAElB,YADA7F,EAAW,sFAKb,MAAMgI,QAAe/J,MACnB,0DAA0D8J,EAAgBE,KAAK,gBAC/E,CACE9J,QAAS,CAAEC,cAAe,UAAU5B,KAIlC0L,QAAgBF,EAAON,OAE7B,IAAKM,EAAOrB,GAGV,OAFA7I,QAAQzB,MAAM,uCAAmC2L,EAAOT,OAAQW,QAChElI,EAAW,oCAIb,IAAImI,EACJ,IACEA,EAAU9J,KAAKuJ,MAAMM,GACrB,MAAOzE,GAGP,OAFA3F,QAAQzB,MAAM,+CAA2CoH,EAAGyE,QAC5DlI,EAAW,+CAIblC,QAAQC,IAAI,sCAA6BoK,GAEzC3H,EACE4H,MAAMC,QAAQF,EAAQf,QAClBe,EAAQf,OAAOzC,IAAKC,IAAK,IAAA0D,EAAAC,EAAA,MAAM,CAC7BhL,KAAMqH,EAAMrH,KACZoI,QAAwB,QAAhB2C,EAAA1D,EAAM4D,QAAQ,UAAE,IAAAF,OAAA,EAAhBA,EAAkB/K,OAAQ,UAClC2H,YAAiC,QAArBqD,EAAA3D,EAAM6D,MAAMC,OAAO,UAAE,IAAAH,OAAA,EAArBA,EAAuB/C,MAAO,GAC1CA,IAAKZ,EAAMkC,cAAcC,QACzBnB,YAAahB,EAAM/B,OAErB,IAEN,MAAOpB,GACP3D,QAAQzB,MAAM,4CAAmCoF,GACjDzB,EAAW,uCAIfjB,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,UAAS,gBAE7B,IAAI,qCAIdnE,IAAAlC,cAAA,UACG0D,EAAgBoE,IAAI,CAACC,EAAOC,IAC3B9F,IAAAlC,cAAA,MACEiI,IAAKD,EACL7F,MAAO,CACL+F,aAAc,OACdC,QAAS,OACTC,WAAY,WAGbL,EAAMM,YACLnG,IAAAlC,cAAA,OACEC,IAAK8H,EAAMM,WACXC,IAAI,cACJC,MAAM,KACNC,OAAO,KACPrG,MAAO,CAAEsG,aAAc,MAAOtC,YAAa,UAG/CjE,IAAAlC,cAAA,OAAKmC,MAAO,CAAEuG,KAAM,IAClBxG,IAAAlC,cAAA,KACE+D,KAAMgE,EAAMY,IACZ9B,OAAO,SACP+B,IAAI,sBACJzG,MAAO,CAAE0G,eAAgB,OAAQvG,MAAO,YAEvCyF,EAAMrH,KAAM,IACbwB,IAAAlC,cAAA,QAAMmC,MAAO,CAAEG,MAAO,SAAU,UAAGyF,EAAMe,SAE1Cf,EAAMgB,aACL7G,IAAAlC,cAAA,WACEkC,IAAAlC,cAAA,UAAQyC,QAASA,IAAMqD,EAAUiC,EAAMgB,aAAc5G,MAAO,CAAEK,UAAW,QACvEN,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,UAAS,gBAE7B,IAAI,0BCrjBjByF,MA1BM/K,IAAyB,IAAxB,eAAEgL,GAAgBhL,EACpC,MAAOuC,EAAaC,GAAkBlE,oBAAS,GAgB/C,OACI6C,IAAAlC,cAAA,WACIkC,IAAAlC,cAAA,UAAQyC,QAhBSuJ,KACrB,MAAM/E,EAAc,IAAK5G,OAAO0G,mBAAqB1G,OAAO2G,yBAC5DC,EAAYC,KAAO,QACnBD,EAAYgF,gBAAiB,EAC7BhF,EAAYW,QAEZX,EAAYE,QAAU,IAAM5D,GAAe,GAC3C0D,EAAYU,MAAQ,IAAMpE,GAAe,GACzC0D,EAAYG,SAAYE,IACpB,MAAMvE,EAAOuE,EAAMC,QAAQ,GAAG,GAAGF,WACjC0E,EAAehJ,KAMoB8E,SAAUvE,GACxCA,EAAc,eAAiB,yBC0DjC4I,MA7EMA,KACnB,MACMC,EACyB,cAA7B9L,OAAOyD,SAASsI,SACZ,iCACA,2CAEIC,EAAS,CACb,kBACA,oBACA,gBACA,2BACA,6BACA,YACA,yBACA,2BA8CN,OACEnK,IAAAlC,cAAA,OAAKmC,MAAO,CAAEmK,UAAW,SAAU9J,UAAW,SAC5CN,IAAAlC,cAAA,UAAI,sCACkC,IACpCkC,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,aAAY,iBAE1CnE,IAAAlC,cAAA,UACEmC,MAAO,CAAEC,QAAS,YAAaI,UAAW,QAC1CC,QA7BcvC,UAElBN,aAAa2M,QAEb,MAAMC,EAxBqB,WAAmB,IAAlBxD,EAAMyD,UAAAzD,OAAA,QAAA0D,IAAAD,UAAA,GAAAA,UAAA,GAAG,IACrC,MAAME,EAAW,iEACjB,IAAI9B,EAAO,GACX,IAAK,IAAI+B,EAAI,EAAGA,EAAI5D,EAAQ4D,IAC1B/B,GAAQ8B,EAAStH,OAAOwH,KAAKC,MAAMD,KAAKE,SAAWJ,EAAS3D,SAE9D,OAAO6B,EAkBcmC,GACfC,OAfsB/M,WAC5B,MACMyE,GADU,IAAIuI,aACCC,OAAOX,GACtBY,QAAeC,OAAOC,OAAOF,OAAO,UAAWzI,GACrD,OAAO4I,KAAKC,OAAOC,gBAAgB,IAAIC,WAAWN,KAC/CO,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KAQUC,CAAsBpB,GAClD5M,aAAauB,QAAQ,gBAAiBqL,GAEtC,MAAMqB,EAAO,IAAIC,gBAAgB,CAC/BC,cAAe,OACfC,UAjDc,mCAkDdC,MAAO5B,EAAOjB,KAAK,KACnB8C,aAAc/B,EACdgC,sBAAuB,OACvBC,eAAgBnB,IAGlB5M,OAAOyD,SAAW,0CAA0C+J,EAAKQ,aAa9D,wBCAQC,MApEEA,KACf,MAAMC,EAAWC,cAgEjB,OA9DA9O,oBAAU,KACR,MACM+O,EADY,IAAIX,gBAAgBzN,OAAOyD,SAAS4K,QAC/BC,IAAI,QACrBnC,EAAe5M,aAAaC,QAAQ,iBAE1C,IAAK4O,IAASjC,EAEZ,OADA3I,MAAM,wEACC0K,EAAS,KAGIrO,WACpB,IAEE,MAAM0O,QAAoBrK,IAAMC,KAAK,2EAA4E,CAC/GiK,OACAI,cAAerC,KAGX,aAAE9H,EAAY,cAAED,GAAkBmK,EAAYjK,KAC5D/E,aAAauB,QAAQ,gBAAiBuD,GACtC9E,aAAauB,QAAQ,wBAAyBsD,GAC9C,MAAMqK,EAAYF,EAAYjK,KAAKoK,WAC7BC,EAAY7K,KAAKD,MAAoB,IAAZ4K,EAC/BlP,aAAauB,QAAQ,2BAA4B6N,EAAUX,YAGnDpN,QAAQC,IAAI,+BAA2BwD,GAIvC,MAAMuK,QAAmB7N,MAAM,gCAAiC,CAC9DE,QAAS,CACPC,cAAe,UAAUmD,KAIvBwK,QAAgBD,EAAWpF,QAC3B,MAAEsF,EAAK,aAAEC,EAAcrF,GAAIZ,GAAkB+F,EACnDtP,aAAauB,QAAQ,kBAAmBgI,GAGxC,MAAMkG,QAAmB9K,IAAMC,KAAK,0EAA2E,CAC7G2K,QACAzO,KAAM0O,GAAgB,kBAGlB,MAAEzP,EAAK,SAAEiE,EAAQ,OAAEuB,GAAWkK,EAAW1K,KAC/C/E,aAAauB,QAAQ,QAASxB,GAC9BC,aAAauB,QAAQ,WAAYyC,GACjChE,aAAauB,QAAQ,UAAWgE,GAEhCoJ,EAAS,SACT,MAAO3J,GAAM,IAADgB,EACZ3E,QAAQzB,MAAM,yBAAqC,QAAZoG,EAAAhB,EAAIe,gBAAQ,IAAAC,OAAA,EAAZA,EAAcjB,OAAQC,GAC7Df,MAAM,kCACN0K,EAAS,OAIbe,IACC,CAACf,IAEGrM,IAAAlC,cAAA,KAAGmC,MAAO,CAAEmK,UAAW,SAAUhK,MAAO,UAAW,mCCoC7CiN,MAxGSA,KACtB,MAAO7L,EAAiBC,GAAsBtE,mBAAS,KAChDwC,EAASsB,GAAc9D,mBAAS,IA0EvC,OAxEAK,oBAAU,KACqBQ,WAC3B,MAAMP,EAAQC,aAAaC,QAAQ,iBACnC,GAAKF,EAKL,IAAK,IAADwK,EAEF,MAAMQ,QAAqBvJ,MAAM,mDAAoD,CACnFE,QAAS,CAAEC,cAAe,UAAU5B,KAIhC6P,GAA8B,QAAnBrF,SADWQ,EAAad,QACVoB,aAAK,IAAAd,OAAA,EAAnBA,EAAqBrC,IAAKC,GAAUA,EAAMgC,MAAO,GAElE,GAAwB,IAApByF,EAASxG,OAEX,YADA7F,EAAW,yDAKb,MAAMsM,EAAgBvP,UACpB,MAAMoK,EAAQ,GACd,IAAK,MAAMP,KAAM2F,EAAO,CAAC,IAADC,EACtB,MAAMrL,QAAYlD,MAChB,0DAA0D2I,YAC1D,CAAEzI,QAAS,CAAEC,cAAe,UAAU5B,KAElCgF,QAAaL,EAAIuF,OAEvB,GADIvF,EAAIwF,KAAiB,QAAX6F,EAAAhL,EAAK4F,cAAM,IAAAoF,OAAA,EAAXA,EAAa3G,QAAS,GAAGsB,EAAME,KAAKT,GAC9CO,EAAMtB,QAAU,EAAG,MAEzB,OAAOsB,GAGHY,QAAwBuE,EAAcD,GAG5C,GAFAvO,QAAQC,IAAI,sBAAkBgK,GAEC,IAA3BA,EAAgBlC,OAElB,YADA7F,EAAW,wEAKb,MAAMgI,QAAe/J,MACnB,0DAA0D8J,EAAgBE,KAAK,gBAC/E,CAAE9J,QAAS,CAAEC,cAAe,UAAU5B,KAGxC,IAAKwL,EAAOrB,GAAI,CACd,MAAMe,QAAaM,EAAON,OAG1B,OAFA5J,QAAQzB,MAAM,iCAA6BqL,QAC3C1H,EAAW,mEAIb,MAAMmI,QAAgBH,EAAOtB,OAC7BlG,EAAmB2H,EAAQf,QAAU,IAChCe,EAAQf,QAAoC,IAA1Be,EAAQf,OAAOvB,QACpC7F,EAAW,+CAEb,MAAOyB,GACP3D,QAAQzB,MAAM,iCAAwBoF,GACtCzB,EAAW,uDA7DXA,EAAW,sCAiEfyM,IACC,IAGD1N,IAAAlC,cAAA,OAAKmC,MAAO,CAAEC,QAAS,SACrBF,IAAAlC,cAAA,UAAI,oCACH6B,GAAWK,IAAAlC,cAAA,KAAGmC,MAAO,CAAEG,MAAO,QAAUT,GACzCK,IAAAlC,cAAA,UACG0D,EAAgBoE,IAAKC,IAAK,IAAA2D,EAAA,OACzBxJ,IAAAlC,cAAA,MAAIiI,IAAKF,EAAMgC,GAAI5H,MAAO,CAAE+F,aAAc,SACxChG,IAAAlC,cAAA,OACEC,IAA0B,QAAvByL,EAAE3D,EAAM6D,MAAMC,OAAO,UAAE,IAAAH,OAAA,EAArBA,EAAuB/C,IAC5BL,IAAI,QACJC,MAAM,KACNpG,MAAO,CAAEgE,YAAa,OAAQ0J,cAAe,YAE/C3N,IAAAlC,cAAA,KACE+D,KAAMgE,EAAMkC,cAAcC,QAC1BrD,OAAO,SACP+B,IAAI,aACJzG,MAAO,CAAE0G,eAAgB,OAAQvG,MAAO,YAEvCyF,EAAMrH,KAAK,MAAIqH,EAAM4D,QAAQ,GAAGjL,YCchCoP,MA5GKA,KAClB,MAAOC,EAAWC,GAAgB3Q,mBAAS,KACpC4Q,EAASC,GAAc7Q,oBAAS,GAEjC8F,EAASvF,aAAaC,QAAQ,WAC9BF,EAAQC,aAAaC,QAAQ,SAEnCH,oBAAU,KAqBJyF,GAAUxF,GApBaO,WACzB,IACE,MAAMoE,QAAYC,IAAMoK,IAAI,sEAAsExJ,EAAU,CAC1G7D,QAAS,CACPC,cAAe,UAAU5B,KAI7BsB,QAAQC,IAAI,kCAAyBoD,EAAIK,MAGzCqL,EAAazE,MAAMC,QAAQlH,EAAIK,MAAQL,EAAIK,KAAO,IAClD,MAAOnF,GACPyB,QAAQzB,MAAM,iCAAkCA,GAChDwQ,EAAa,IACd,QACCE,GAAW,KAKbC,IAED,CAAChL,EAAQxF,IA+BZ,OACEuC,IAAAlC,cAAA,OAAKiG,UAAU,aACb/D,IAAAlC,cAAA,UAAIkC,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,SAAQ,gBAAS,uBAChD4J,EACC/N,IAAAlC,cAAA,SAAG,wBACoB,IAArB+P,EAAU/G,OACZ9G,IAAAlC,cAAA,SAAG,uBAEHkC,IAAAlC,cAAAkC,IAAAK,SAAA,KACGwN,EAAUjI,IAAI,CAAC7E,EAAU+E,IACxB9F,IAAAlC,cAAA,OAAKiI,IAAKD,EAAO7F,MAAO,CAAE+F,aAAc,OAAQkI,aAAc,iBAAkBC,cAAe,SAC7FnO,IAAAlC,cAAA,UAAKiD,EAASvC,MACdwB,IAAAlC,cAAA,SAAGkC,IAAAlC,cAAA,cAAQ,YAAiB,IAjBpBsQ,KAClB,MAAMC,EAAO,IAAIpM,KAAKmM,GACtB,OAAOC,EAAKC,qBAAuB,IAAMD,EAAKE,sBAeNC,CAAWzN,EAAS0N,YAClDzO,IAAAlC,cAAA,UACGuL,MAAMC,QAAQvI,EAASuC,QAAUvC,EAASuC,MAAMwD,OAAS,EACxD/F,EAASuC,MAAMsC,IAAI,CAAC8I,EAAMhE,IACxB1K,IAAAlC,cAAA,MAAIiI,IAAK2E,GACP1K,IAAAlC,cAAA,KAAG+D,KAAM6M,EAAKjI,IAAK9B,OAAO,SAAS+B,IAAI,uBACpCgI,EAAKlQ,KAAK,MAAIkQ,EAAK9H,UAK1B5G,IAAAlC,cAAA,UAAI,+BAGRkC,IAAAlC,cAAA,UACEyC,QAASA,IAxDFvC,WACnB,UACQqE,IAAMsM,OAAO,iEAAiEC,EAAc,CAChGxP,QAAS,CAAEC,cAAe,UAAU5B,KAEtCqQ,EAAaD,EAAUzG,OAAQyH,GAAMA,EAAEC,MAAQF,IAC/C,MAAOlM,GACP3D,QAAQzB,MAAM,6BAA8BoF,KAiDnBqM,CAAahO,EAAS+N,KACrC7O,MAAO,CAAEE,gBAAiB,UAAWC,MAAO,OAAQF,QAAS,WAAY8O,OAAQ,SAEjFhP,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,UAAS,sBAAU,aAIrDnE,IAAAlC,cAAA,UACEyC,QArDavC,UACrB,GAAKG,OAAO8Q,QAAQ,kDAEpB,UACQ5M,IAAMsM,OAAO,sEAAsE1L,UAAgB,CACvG7D,QAAS,CAAEC,cAAe,UAAU5B,KAEtCqQ,EAAa,IACb,MAAOpL,GACP3D,QAAQzB,MAAM,6BAA8BoF,KA6CtCzC,MAAO,CAAEE,gBAAiB,UAAWC,MAAO,OAAQF,QAAS,WAAY8O,OAAQ,OAAQ1O,UAAW,SAEpGN,IAAAlC,cAAA,QAAMoG,KAAK,MAAMC,aAAW,SAAQ,UAAQ,iBC3EzC+K,MAnBHA,IAERlP,IAAAlC,cAACqR,IAAM,KACLnP,IAAAlC,cAAA,WACEkC,IAAAlC,cAAA,UAAI,kCACJkC,IAAAlC,cAACsR,IAAM,KACbpP,IAAAlC,cAACuR,IAAK,CAACC,KAAK,IAAIC,QAASvP,IAAAlC,cAACkM,EAAY,QACtChK,IAAAlC,cAACuR,IAAK,CAACC,KAAK,YAAYC,QAASvP,IAAAlC,cAACsO,EAAQ,QAC1CpM,IAAAlC,cAACuR,IAAK,CAACC,KAAK,QAAQC,QAASvP,IAAAlC,cAAC8C,EAAI,QAClCZ,IAAAlC,cAACuR,IAAK,CAACC,KAAK,gBAAgBC,QAASvP,IAAAlC,cAAC8L,EAAY,QAClD5J,IAAAlC,cAACuR,IAAK,CAACC,KAAK,mBAAmBC,QAASvP,IAAAlC,cAACuP,EAAe,QACxDrN,IAAAlC,cAACuR,IAAK,CAACC,KAAK,aAAaC,QAASvP,IAAAlC,cAAC0R,EAAW,WCRjCC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAK/Q,IAAkD,IAAjD,OAAEgR,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASpR,EACpEgR,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWtS,SAASuS,eAAe,SACpDC,OACHrQ,IAAAlC,cAACkC,IAAMsQ,WAAU,KACftQ,IAAAlC,cAACoR,EAAG,QAORO,M","file":"static/js/main.d4231a44.chunk.js","sourcesContent":["/* import React, { useEffect, useState } from 'react';\n\nconst SpotifyPlayer = () => {\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [error, setError] = useState(null); // 🆕\n\n  useEffect(() => {\n    const token = localStorage.getItem('spotify_token');\n    if (!token) return;\n\n    const script = document.createElement('script');\n    script.src = 'https://sdk.scdn.co/spotify-player.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const newPlayer = new window.Spotify.Player({\n        name: 'Moodify Player',\n        getOAuthToken: cb => cb(token),\n        volume: 0.5,\n      });\n\n      newPlayer.addListener('ready', ({ device_id }) => {\n        console.log('✅ Spotify player ready with device ID:', device_id);\n        localStorage.setItem('device_id', device_id);\n        setDeviceId(device_id);\n      });\n\n      newPlayer.addListener('initialization_error', ({ message }) => {\n        console.error('Initialization Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.addListener('authentication_error', ({ message }) => {\n        console.error('Auth Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.addListener('account_error', ({ message }) => {\n        console.error('Account Error:', message);\n        setError(\"This feature requires Spotify Premium.\");\n      });\n\n      newPlayer.addListener('playback_error', ({ message }) => {\n        console.error('Playback Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.connect().then(success => {\n        if (!success) {\n          console.error(\"❌ Player connection failed (likely no Premium).\");\n          setError(\"Spotify Web Playback only works with Premium accounts.\");\n        }\n      });\n\n      setPlayer(newPlayer);\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: \"10px\", backgroundColor: \"#222\", color: \"#fff\" }}>\n      <p>🎵 Spotify Web Playback Initialized</p>\n      {error ? (\n        <p style={{ color: \"red\" }}>⚠️ {error}</p>\n      ) : deviceId ? (\n        <p>Device ID: {deviceId}</p>\n      ) : (\n        <p>Waiting for device ID...</p>\n      )}\n    </div>\n  );\n};\n\nexport default SpotifyPlayer; */\n\nimport React, { useEffect, useState } from 'react';\n\nconst SpotifyPlayer = () => {\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem('spotify_token');\n    if (!token) return;\n\n    const script = document.createElement('script');\n    script.src = 'https://sdk.scdn.co/spotify-player.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const newPlayer = new window.Spotify.Player({\n        name: 'Moodify Player',\n        getOAuthToken: cb => cb(token),\n        volume: 0.5,\n      });\n\n      newPlayer.addListener('ready', ({ device_id }) => {\n        console.log('✅ Spotify player ready with device ID:', device_id);\n        localStorage.setItem('device_id', device_id);\n        setDeviceId(device_id);\n\n        // Optional: Transfer playback to this device\n        fetch('https://api.spotify.com/v1/me/player', {\n          method: 'PUT',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ device_ids: [device_id], play: false }),\n        });\n      });\n\n      newPlayer.addListener('initialization_error', ({ message }) => setError(message));\n      newPlayer.addListener('authentication_error', ({ message }) => setError(message));\n      newPlayer.addListener('account_error', ({ message }) => setError(\"This feature requires Spotify Premium.\"));\n      newPlayer.addListener('playback_error', ({ message }) => setError(message));\n\n      newPlayer.connect();\n      setPlayer(newPlayer);\n    };\n  }, []);\n\n  // 🔸 Playback control handlers\n  const token = localStorage.getItem('spotify_token');\n\n  const handlePlay = () => {\n    const uri = localStorage.getItem(\"last_uri\"); // optional\n    const deviceId = localStorage.getItem('device_id');\n    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n      method: \"PUT\",\n      headers: { Authorization: `Bearer ${token}` },\n      body: JSON.stringify({}) // add uris: [] here if you want to play a track\n    });\n  };\n\n  const handlePause = () => {\n    fetch(\"https://api.spotify.com/v1/me/player/pause\", {\n      method: \"PUT\",\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  };\n\n  const handleNext = () => {\n    fetch(\"https://api.spotify.com/v1/me/player/next\", {\n      method: \"POST\",\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  };\n\n  const handlePrevious = () => {\n    fetch(\"https://api.spotify.com/v1/me/player/previous\", {\n      method: \"POST\",\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  };\n\n  return (\n    <div style={{ padding: \"10px\", backgroundColor: \"#222\", color: \"#fff\" }}>\n      <p>🎵 Spotify Web Playback Initialized</p>\n      {error ? (\n        <p style={{ color: \"red\" }}>⚠️ {error}</p>\n      ) : deviceId ? (\n        <>\n          <p>Device ID: {deviceId}</p>\n          <div style={{ marginTop: \"10px\" }}>\n            <button onClick={handlePrevious}>⏮️</button>\n            <button onClick={handlePlay}>▶️</button>\n            <button onClick={handlePause}>⏸️</button>\n            <button onClick={handleNext}>⏭️</button>\n          </div>\n        </>\n      ) : (\n        <p>Waiting for device ID...</p>\n      )}\n    </div>\n  );\n};\n\nexport default SpotifyPlayer;\n\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Home.css\";\nimport SpotifyPlayer from \"./SpotifyPlayer\";\n\n// ✅ Token refresh helper\nasync function refreshSpotifyToken() {\n  const refreshToken = localStorage.getItem(\"spotify_refresh_token\");\n\n  try {\n    const res = await axios.post(\n      \"https://moodify-capstone-winter2025.onrender.com/api/auth/refresh-token\",\n      { refresh_token: refreshToken }\n    );\n\n    const { access_token } = res.data;\n    localStorage.setItem(\"spotify_token\", access_token);\n    return access_token;\n  } catch (err) {\n    console.error(\"Failed to refresh token:\", err);\n    alert(\"Spotify session expired. Please log in again.\");\n    window.location.href = \"/\";\n  }\n}\n\nconst Home = () => {\n  const [mood, setMood] = useState(\"\");\n  const [playlist, setPlaylist] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [isNaming, setIsNaming] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n\n  const username = localStorage.getItem(\"username\");\n\n  useEffect(() => {\n    const spotifyToken = localStorage.getItem(\"spotify_token\");\n    if (!spotifyToken) {\n      alert(\"Spotify login failed. Please try again.\");\n      window.location.href = \"/\";\n    }\n  }, []); // Removed the extra closing brace here\n\n  const ensureValidToken = async () => {\n    let token = localStorage.getItem(\"spotify_token\");\n    const expiryTime = localStorage.getItem(\"spotify_token_expires_at\");\n    const now = Date.now();\n\n    if (!token || !expiryTime || now >= Number(expiryTime)) {\n      token = await refreshSpotifyToken();\n    }\n    return token;\n  };\n  \n  const fetchPlaylist = async (mood) => {\n    if (!mood.trim()) {\n      setMessage(\"Please enter a mood first.\");\n      return;\n    }\n  \n    try {\n      const token = localStorage.getItem(\"token\");\n      const spotifyToken = await ensureValidToken();\n      const userId = localStorage.getItem(\"user_id\");\n  \n      // Build the payload and log it for debugging purposes.\n      const payload = {\n        name: `Moodify - ${mood.charAt(0).toUpperCase() + mood.slice(1)} Vibes`,\n        songs: [],\n        mood,\n        createdByVoice: false,\n        voiceCommand: \"\",\n        userId,\n      };\n  \n      console.log(\"Sending payload to generate playlist:\", payload);\n  \n      const response = await axios.post(\n        \"https://moodify-capstone-winter2025.onrender.com/api/playlist/generate\",\n        payload,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"x-spotify-token\": spotifyToken,\n          },\n        }\n      );\n  \n      console.log(\"Playlist response:\", response.data);\n      setPlaylist(response.data?.playlist?.songs || []);\n      setMessage(\"\");\n    } catch (err) {\n      console.error(\"Error generating playlist:\", err.response || err);\n      setMessage(err.response?.data?.error || \"Failed to generate playlist.\");\n    }\n  };\n  \n\n  // Dummy classifyMood function for demonstration purposes.\n  // Replace this function with your actual implementation.\n  const classifyMood = async (transcript) => {\n    return transcript.trim();\n  };\n\n  const startListening = () => {\n    try {\n      const SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        setMessage(\"Speech recognition is not supported in your browser.\");\n        return;\n      }\n      \n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n\n      recognition.onstart = () => setIsListening(true);\n\n      recognition.onresult = async (event) => {\n        const transcript = event.results[0][0].transcript;\n        setMood(transcript);\n\n        // ✅ Classify mood using your Python ML API\n        const predictedMood = await classifyMood(transcript);\n        if (!predictedMood) {\n          setMessage(\"Unable to determine mood. Try again.\");\n          return;\n        }\n\n        fetchPlaylist(predictedMood);\n      };\n\n      recognition.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event);\n        setMessage(`Speech recognition error: ${event.error}`);\n      };\n\n      recognition.onend = () => setIsListening(false);\n\n      recognition.start();\n    } catch (err) {\n      console.error(\"Speech recognition failed:\", err);\n      setMessage(\"Speech recognition not supported or blocked.\");\n    }\n  };\n\n  const startNamingByVoice = () => {\n    try {\n      const SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        setMessage(\"Speech recognition is not supported in your browser.\");\n        return;\n      }\n\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.start();\n\n      recognition.onstart = () => setIsNaming(true);\n\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setPlaylistName(transcript);\n      };\n\n      recognition.onerror = (event) => {\n        console.error(\"Voice naming error:\", event);\n        setMessage(`Voice naming error: ${event.error}`);\n      };\n\n      recognition.onend = () => setIsNaming(false);\n    } catch (err) {\n      console.error(\"Voice naming failed:\", err);\n      setMessage(\"Voice naming not supported or blocked.\");\n    }\n  };\n\n  const playTrack = async (uri) => {\n    const token = localStorage.getItem(\"spotify_token\");\n    const deviceId = localStorage.getItem(\"device_id\");\n    if (!token || !deviceId) {\n      alert(\"Spotify is not connected.\");\n      return;\n    }\n    try {\n      await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ uris: [uri] }),\n      });\n    } catch (err) {\n      console.error(\"Error playing track:\", err);\n      alert(\"Playback failed. Make sure Spotify is open and logged in.\");\n    }\n  };\n\n  const savePlaylist = async () => {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"user_id\");\n\n    if (!playlist.length) {\n      alert(\"Please generate a playlist first.\");\n      return;\n    }\n\n    try {\n      await axios.post(\n        \"https://moodify-capstone-winter2025.onrender.com/api/playlist/save\",\n        {\n          name: playlistName,\n          songs: playlist,\n          mood,\n          userId,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      alert(\"Playlist saved successfully!\");\n      setPlaylistName(\"\");\n    } catch (err) {\n      console.error(\"Failed to save playlist:\", err);\n      alert(\"Failed to save playlist.\");\n    }\n  };\n\n  const saveToSpotify = async () => {\n    const token = localStorage.getItem(\"spotify_token\");\n    const spotifyUserId = localStorage.getItem(\"spotify_user_id\");\n\n    if (!playlistName || playlist.length === 0) {\n      alert(\"Please generate and name a playlist first.\");\n      return;\n    }\n\n    // 🔍 Log here\n    console.log(\"🎵 Playlist being sent to Spotify:\", playlist);\n\n    const uris = playlist\n      .map((track) => {\n        const match = track.url?.match(/track\\/([a-zA-Z0-9]+)/);\n        return match ? `spotify:track:${match[1]}` : null;\n      })\n      .filter(Boolean);\n\n    // 🔍 Log URIs\n    console.log(\"🎯 Extracted URIs:\", uris);\n\n    if (uris.length === 0) {\n      alert(\"No valid tracks to add. Please regenerate playlist.\");\n      return;\n    }\n\n    try {\n      // Step 1: Create the playlist\n      const createRes = await fetch(\n        `https://api.spotify.com/v1/users/${spotifyUserId}/playlists`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            name: playlistName,\n            description: \"Created with Moodify 🎵\",\n            public: false,\n          }),\n        }\n      );\n\n      const created = await createRes.json();\n\n      if (!createRes.ok || !created.id) {\n        console.error(\"Spotify playlist creation failed:\", created);\n        alert(\"Spotify playlist creation failed.\");\n        return;\n      }\n\n      // Step 2: Add tracks\n      await fetch(\n        `https://api.spotify.com/v1/playlists/${created.id}/tracks`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ uris }),\n        }\n      );\n\n      alert(\"✅ Playlist saved to your Spotify account!\");\n      window.open(created.external_urls?.spotify || \"https://open.spotify.com\", \"_blank\");\n    } catch (err) {\n      console.error(\"❌ Failed to sync to Spotify:\", err);\n      alert(\"Failed to save playlist to Spotify.\");\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"spotify_token\");\n    localStorage.removeItem(\"user_id\");\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <div className=\"container\">\n      <SpotifyPlayer />\n\n      {/* 🧭 Navigation Menu */}\n      <nav style={{ background: \"#1DB954\", padding: \"10px\" }}>\n        <a href=\"/home\" style={{ color: \"#fff\", marginRight: \"15px\" }}>\n          Home\n        </a>\n        <a href=\"/recommendations\" style={{ color: \"#fff\", marginRight: \"15px\" }}>\n          Recommendations\n        </a>\n        <a href=\"/playlists\" style={{ color: \"#fff\" }}>\n          My Playlists\n        </a>\n      </nav>\n\n      <h1>Welcome to Moodify!</h1>\n      {username && (\n        <h2>\n          Login with Spotify to start Moodify{\" \"}\n          <span role=\"img\" aria-label=\"headphone\">\n            🎧\n          </span>\n        </h2>\n      )}\n      <button onClick={handleLogout}>Logout</button>\n\n      <div>\n        <h2>Generate Playlist</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your mood (e.g., happy, sad)\"\n          value={mood}\n          onChange={(e) => setMood(e.target.value)}\n        />\n        <button onClick={() => fetchPlaylist(mood)}>Generate Playlist</button>\n      </div>\n\n      <div>\n        <button onClick={startListening} disabled={isListening}>\n          {isListening ? \"Listening...\" : \"Speak Your Mood\"}\n        </button>\n      </div>\n\n      <h3>Playlist:</h3>\n      {message && <p>{message}</p>}\n      <ul>\n        {playlist.map((track, index) => (\n          <li\n            key={index}\n            style={{\n              marginBottom: \"12px\",\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            {track.albumImage && (\n              <img\n                src={track.albumImage}\n                alt=\"Album Cover\"\n                width=\"50\"\n                height=\"50\"\n                style={{ borderRadius: \"5px\", marginRight: \"10px\" }}\n              />\n            )}\n            <div style={{ flex: 1 }}>\n              <a\n                href={track.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n              >\n                {track.name} <span style={{ color: \"#555\" }}>– {track.artist}</span>\n              </a>\n              {track.spotify_uri && (\n                <div>\n                  <button onClick={() => playTrack(track.spotify_uri)} style={{ marginTop: \"5px\" }}>\n                    ▶️ Play in Moodify\n                  </button>\n                </div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      {playlist.length > 0 && (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Custom Playlist Name (optional)\"\n            value={playlistName}\n            onChange={(e) => setPlaylistName(e.target.value)}\n            style={{ marginTop: \"10px\", padding: \"8px\", width: \"80%\" }}\n          />\n          <button\n            onClick={startNamingByVoice}\n            disabled={isNaming}\n            style={{ marginLeft: \"10px\", padding: \"8px\" }}\n          >\n            🎤 {isNaming ? \"Listening...\" : \"Name by Voice\"}\n          </button>\n\n          <br />\n          <button onClick={savePlaylist} style={{ marginTop: \"10px\" }}>\n            <span role=\"img\" aria-label=\"save\">\n              💾\n            </span>{\" \"}\n            Save this Playlist\n          </button>\n\n          <br />\n          <button onClick={saveToSpotify} style={{ marginTop: \"10px\" }}>\n            💚 Save to Spotify\n          </button>\n        </>\n      )}\n\n      <h3>Recommended for You</h3>\n      <button\n        onClick={async () => {\n          try {\n            const token = localStorage.getItem(\"spotify_token\");\n\n            // ✅ New validation logic: test each track with /recommendations\n            const getValidSeedTracks = async (trackIds, token) => {\n              const valid = [];\n\n              for (const id of trackIds) {\n                const res = await fetch(\n                  `https://api.spotify.com/v1/recommendations?seed_tracks=${id}&limit=1`,\n                  {\n                    headers: { Authorization: `Bearer ${token}` },\n                  }\n                );\n\n                if (res.ok) {\n                  const data = await res.json();\n                  if (data.tracks && data.tracks.length > 0) {\n                    valid.push(id);\n                  } else {\n                    console.warn(`⚠️ No recommendations for seed track: ${id}`);\n                  }\n                } else {\n                  console.warn(`❌ Track not valid for recommendations: ${id} - Status ${res.status}`);\n                }\n\n                if (valid.length >= 3) break; // Spotify allows max 5 seeds, we limit to 3\n              }\n\n              return valid;\n            };\n\n            // Step 1: Get user's top tracks\n            const topTracksRes = await fetch(\"https://api.spotify.com/v1/me/top/tracks?limit=5\", {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n\n            const topTracksText = await topTracksRes.text();\n\n            if (!topTracksRes.ok) {\n              console.error(\"❌ Top tracks fetch failed:\", topTracksRes.status, topTracksText);\n              setMessage(\"Failed to fetch top tracks.\");\n              return;\n            }\n\n            let topTracksData;\n            try {\n              topTracksData = JSON.parse(topTracksText);\n            } catch (e) {\n              console.error(\"❌ Failed to parse top tracks JSON:\", e, topTracksText);\n              setMessage(\"Error parsing top tracks from Spotify.\");\n              return;\n            }\n\n            const rawSeedTracks = topTracksData.items?.map((track) => track.id) || [];\n            console.log(\"🎯 Raw seed tracks:\", rawSeedTracks);\n\n            if (rawSeedTracks.length === 0) {\n              setMessage(\"No top tracks found. Please listen to more songs on Spotify.\");\n              return;\n            }\n\n            // Step 2: Validate recommendation capability\n            const validSeedTracks = await getValidSeedTracks(rawSeedTracks, token);\n            console.log(\"✅ Valid recommendation seeds:\", validSeedTracks);\n\n            if (validSeedTracks.length === 0) {\n              setMessage(\"No valid tracks found for recommendations. Try listening to more music on Spotify.\");\n              return;\n            }\n\n            // Step 3: Fetch recommendations\n            const recRes = await fetch(\n              `https://api.spotify.com/v1/recommendations?seed_tracks=${validSeedTracks.join(\",\")}&limit=10`,\n              {\n                headers: { Authorization: `Bearer ${token}` },\n              }\n            );\n\n            const recText = await recRes.text();\n\n            if (!recRes.ok) {\n              console.error(\"❌ Recommendations fetch failed:\", recRes.status, recText);\n              setMessage(\"Failed to fetch recommendations.\");\n              return;\n            }\n\n            let recData;\n            try {\n              recData = JSON.parse(recText);\n            } catch (e) {\n              console.error(\"❌ Failed to parse recommendations JSON:\", e, recText);\n              setMessage(\"Error parsing recommendations from Spotify.\");\n              return;\n            }\n\n            console.log(\"🎁 Final Recommendations:\", recData);\n\n            setRecommendations(\n              Array.isArray(recData.tracks)\n                ? recData.tracks.map((track) => ({\n                    name: track.name,\n                    artist: track.artists[0]?.name || \"Unknown\",\n                    albumImage: track.album.images[0]?.url || \"\",\n                    url: track.external_urls.spotify,\n                    spotify_uri: track.uri,\n                  }))\n                : []\n            );\n          } catch (err) {\n            console.error(\"💥 Recommendation fetch failed:\", err);\n            setMessage(\"Failed to fetch recommendations.\");\n          }\n        }}\n      >\n        <span role=\"img\" aria-label=\"target\">\n          🎯\n        </span>{\" \"}\n        Show Personalized Recommendations\n      </button>\n\n      <ul>\n        {recommendations.map((track, index) => (\n          <li\n            key={index}\n            style={{\n              marginBottom: \"12px\",\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            {track.albumImage && (\n              <img\n                src={track.albumImage}\n                alt=\"Album Cover\"\n                width=\"50\"\n                height=\"50\"\n                style={{ borderRadius: \"5px\", marginRight: \"10px\" }}\n              />\n            )}\n            <div style={{ flex: 1 }}>\n              <a\n                href={track.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n              >\n                {track.name}{\" \"}\n                <span style={{ color: \"#555\" }}>– {track.artist}</span>\n              </a>\n              {track.spotify_uri && (\n                <div>\n                  <button onClick={() => playTrack(track.spotify_uri)} style={{ marginTop: \"5px\" }}>\n                    <span role=\"img\" aria-label=\"target\">\n                      ▶️\n                    </span>{\" \"}\n                    Play in Moodify\n                  </button>\n                </div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\n\nconst VoiceCommand = ({ onMoodDetected }) => {\n    const [isListening, setIsListening] = useState(false);\n\n    const startRecognition = () => {\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n        recognition.lang = 'en-US';\n        recognition.interimResults = false;\n        recognition.start();\n\n        recognition.onstart = () => setIsListening(true);\n        recognition.onend = () => setIsListening(false);\n        recognition.onresult = (event) => {\n            const mood = event.results[0][0].transcript;\n            onMoodDetected(mood);\n        };\n    };\n\n    return (\n        <div>\n            <button onClick={startRecognition} disabled={isListening}>\n                {isListening ? \"Listening...\" : \"Start Voice Command\"}\n            </button>\n        </div>\n    );\n};\n\nexport default VoiceCommand;\n","// src/components/SpotifyLogin.js\nimport React, { useEffect } from \"react\";\n\nconst SpotifyLogin = () => {\n  const CLIENT_ID = \"cdea26e7b85149eeb1e02a6812690634\"; // ✅ Replace with process.env var in future if bundling securely\n  const REDIRECT_URI =\n    window.location.hostname === \"localhost\"\n      ? \"http://localhost:3000/callback\"\n      : \"https://moodify-ca.onrender.com/callback\";\n\n      const SCOPES = [\n        \"user-read-email\",\n        \"user-read-private\",\n        \"user-top-read\",\n        \"user-read-playback-state\",\n        \"user-modify-playback-state\",\n        \"streaming\",\n        \"playlist-modify-public\",\n        \"playlist-modify-private\"\n      ];\n      \n\n  // 🔐 Generates a random code_verifier\n  const generateCodeVerifier = (length = 128) => {\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let text = \"\";\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  // 🔐 Hash the verifier to generate a code_challenge\n  const generateCodeChallenge = async (codeVerifier) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await crypto.subtle.digest(\"SHA-256\", data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n  };\n\n  const handleLogin = async () => {\n    // ✅ Clear all old tokens from local storage\n    localStorage.clear();\n  \n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    localStorage.setItem(\"code_verifier\", codeVerifier); // ✅ Store for use in callback\n  \n    const args = new URLSearchParams({\n      response_type: \"code\",\n      client_id: CLIENT_ID,\n      scope: SCOPES.join(\" \"),\n      redirect_uri: REDIRECT_URI,\n      code_challenge_method: \"S256\",\n      code_challenge: codeChallenge,\n    });\n  \n    window.location = `https://accounts.spotify.com/authorize?${args.toString()}`;\n  };\n  \n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h2>\n        Login with Spotify to start Moodify{\" \"}\n        <span role=\"img\" aria-label=\"headphone\">🎧</span>\n      </h2>\n      <button\n        style={{ padding: \"10px 20px\", marginTop: \"20px\" }}\n        onClick={handleLogin}\n      >\n        Login with Spotify\n      </button>\n    </div>\n  );\n};\n\nexport default SpotifyLogin;\n","// src/components/Callback.js\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst Callback = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    const codeVerifier = localStorage.getItem(\"code_verifier\");\n\n    if (!code || !codeVerifier) {\n      alert(\"Missing authorization code or verifier. Please try logging in again.\");\n      return navigate(\"/\");\n    }\n\n    const exchangeToken = async () => {\n      try {\n        // Step 1: Exchange code + verifier for access token\n        const exchangeRes = await axios.post(\"https://moodify-capstone-winter2025.onrender.com/api/auth/exchange-token\", {\n          code,\n          code_verifier: codeVerifier\n        });\n\n        const { access_token, refresh_token } = exchangeRes.data;\nlocalStorage.setItem(\"spotify_token\", access_token);\nlocalStorage.setItem(\"spotify_refresh_token\", refresh_token);\nconst expiresIn = exchangeRes.data.expires_in; // seconds\nconst expiresAt = Date.now() + expiresIn * 1000; // milliseconds\nlocalStorage.setItem(\"spotify_token_expires_at\", expiresAt.toString());\n\n\n        console.log(\"✅ Spotify Access Token:\", access_token);\n\n\n        // Step 2: Get user profile from Spotify\n        const profileRes = await fetch(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n          },\n        });\n\n        const profile = await profileRes.json();\n        const { email, display_name, id: spotifyUserId } = profile;\n        localStorage.setItem(\"spotify_user_id\", spotifyUserId);\n\n        // Step 3: Log in/register in Moodify backend\n        const moodifyRes = await axios.post(\"https://moodify-capstone-winter2025.onrender.com/api/auth/spotify-login\", {\n          email,\n          name: display_name || \"Spotify User\",\n        });\n\n        const { token, username, userId } = moodifyRes.data;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"user_id\", userId);\n\n        navigate(\"/home\");\n      } catch (err) {\n        console.error(\"Authentication error:\", err.response?.data || err);\n        alert(\"Spotify authentication failed.\");\n        navigate(\"/\");\n      }\n    };\n\n    exchangeToken();\n  }, [navigate]);\n\n  return <p style={{ textAlign: \"center\", color: \"green\" }}>Authenticating with Spotify...</p>;\n};\n\nexport default Callback;\n","import React, { useEffect, useState } from \"react\";\n\nconst Recommendations = () => {\n  const [recommendations, setRecommendations] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    const fetchRecommendations = async () => {\n      const token = localStorage.getItem(\"spotify_token\");\n      if (!token) {\n        setMessage(\"Please log in with Spotify first.\");\n        return;\n      }\n\n      try {\n        // Step 1: Fetch top tracks\n        const topTracksRes = await fetch(\"https://api.spotify.com/v1/me/top/tracks?limit=5\", {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        const topTracksData = await topTracksRes.json();\n        const rawSeeds = topTracksData.items?.map((track) => track.id) || [];\n\n        if (rawSeeds.length === 0) {\n          setMessage(\"No top tracks found. Listen to more songs on Spotify.\");\n          return;\n        }\n\n        // Step 2: Validate usable seed tracks\n        const getValidSeeds = async (seeds) => {\n          const valid = [];\n          for (const id of seeds) {\n            const res = await fetch(\n              `https://api.spotify.com/v1/recommendations?seed_tracks=${id}&limit=1`,\n              { headers: { Authorization: `Bearer ${token}` } }\n            );\n            const data = await res.json();\n            if (res.ok && data.tracks?.length > 0) valid.push(id);\n            if (valid.length >= 3) break;\n          }\n          return valid;\n        };\n\n        const validSeedTracks = await getValidSeeds(rawSeeds);\n        console.log(\"✅ Valid seeds:\", validSeedTracks);\n\n        if (validSeedTracks.length === 0) {\n          setMessage(\"No valid top tracks for generating recommendations. Try again later.\");\n          return;\n        }\n\n        // Step 3: Fetch final recommendations\n        const recRes = await fetch(\n          `https://api.spotify.com/v1/recommendations?seed_tracks=${validSeedTracks.join(\",\")}&limit=10`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n\n        if (!recRes.ok) {\n          const text = await recRes.text();\n          console.error(\"❌ Recommendations failed:\", text);\n          setMessage(\"Failed to load recommendations. Spotify token might be expired.\");\n          return;\n        }\n\n        const recData = await recRes.json();\n        setRecommendations(recData.tracks || []);\n        if (!recData.tracks || recData.tracks.length === 0) {\n          setMessage(\"No recommendations available at the moment.\");\n        }\n      } catch (err) {\n        console.error(\"💥 Unexpected error:\", err);\n        setMessage(\"Error loading recommendations. Try refreshing.\");\n      }\n    };\n\n    fetchRecommendations();\n  }, []);\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <h2>🎧 Recommended For You</h2>\n      {message && <p style={{ color: \"red\" }}>{message}</p>}\n      <ul>\n        {recommendations.map((track) => (\n          <li key={track.id} style={{ marginBottom: \"10px\" }}>\n            <img\n              src={track.album.images[0]?.url}\n              alt=\"cover\"\n              width=\"50\"\n              style={{ marginRight: \"10px\", verticalAlign: \"middle\" }}\n            />\n            <a\n              href={track.external_urls.spotify}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n            >\n              {track.name} - {track.artists[0].name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Recommendations;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst MyPlaylists = () => {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const userId = localStorage.getItem(\"user_id\");\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    const fetchUserPlaylists = async () => {\n      try {\n        const res = await axios.get(`https://moodify-capstone-winter2025.onrender.com/api/playlist/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        console.log(\"🎧 Fetched playlists:\", res.data);\n\n        // Ensure it's an array\n        setPlaylists(Array.isArray(res.data) ? res.data : []);\n      } catch (error) {\n        console.error(\"Error fetching user playlists:\", error);\n        setPlaylists([]); // fallback\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userId && token) {\n      fetchUserPlaylists();\n    }\n  }, [userId, token]);\n\n  const handleDelete = async (playlistId) => {\n    try {\n      await axios.delete(`https://moodify-capstone-winter2025.onrender.com/api/playlist/${playlistId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setPlaylists(playlists.filter((p) => p._id !== playlistId));\n    } catch (err) {\n      console.error(\"Failed to delete playlist:\", err);\n    }\n  };\n\n  const handleClearAll = async () => {\n    if (!window.confirm(\"Are you sure you want to delete all playlists?\")) return;\n\n    try {\n      await axios.delete(`https://moodify-capstone-winter2025.onrender.com/api/playlist/user/${userId}/clear`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setPlaylists([]);\n    } catch (err) {\n      console.error(\"Failed to clear playlists:\", err);\n    }\n  };\n\n  const formatDate = (isoString) => {\n    const date = new Date(isoString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"container\">\n      <h2><span role=\"img\" aria-label=\"music\">🎵</span> My Saved Playlists</h2>\n      {loading ? (\n        <p>Loading playlists...</p>\n      ) : playlists.length === 0 ? (\n        <p>No playlists found.</p>\n      ) : (\n        <>\n          {playlists.map((playlist, index) => (\n            <div key={index} style={{ marginBottom: \"20px\", borderBottom: \"1px solid #ccc\", paddingBottom: \"10px\" }}>\n              <h3>{playlist.name}</h3>\n              <p><strong>Created:</strong> {formatDate(playlist.createdAt)}</p>\n              <ul>\n                {Array.isArray(playlist.songs) && playlist.songs.length > 0 ? (\n                  playlist.songs.map((song, i) => (\n                    <li key={i}>\n                      <a href={song.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {song.name} - {song.artist}\n                      </a>\n                    </li>\n                  ))\n                ) : (\n                  <li>No songs in this playlist.</li>\n                )}\n              </ul>\n              <button\n                onClick={() => handleDelete(playlist._id)}\n                style={{ backgroundColor: '#dc3545', color: '#fff', padding: '5px 10px', border: 'none' }}\n              >\n                <span role=\"img\" aria-label=\"delete\">🗑️</span> Delete\n              </button>\n            </div>\n          ))}\n          <button\n            onClick={handleClearAll}\n            style={{ backgroundColor: '#dc3545', color: '#fff', padding: '8px 15px', border: 'none', marginTop: '10px' }}\n          >\n            <span role=\"img\" aria-label=\"clear\">❌</span> Clear All\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MyPlaylists;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport VoiceCommand from \"./voicecommand\";\nimport SpotifyLogin from \"./SpotifyLogin\"; // make sure no space!\nimport Callback from \"./Callback\";\nimport Recommendations from \"./Recommendations\"; \nimport Myplaylists from \"./Myplaylists\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <h1>Moodify: AI Playlist Generator</h1>\n        <Routes>\n  <Route path=\"/\" element={<SpotifyLogin />} />\n  <Route path=\"/callback\" element={<Callback />} />\n  <Route path=\"/home\" element={<Home />} />\n  <Route path=\"/voicecommand\" element={<VoiceCommand />} />\n  <Route path=\"/recommendations\" element={<Recommendations />} />\n  <Route path=\"/playlists\" element={<Myplaylists />} />\n</Routes>\n\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}