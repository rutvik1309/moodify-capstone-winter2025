{"version":3,"sources":["SpotifyPlayer.js","home.js","voicecommand.js","SpotifyLogin.js","Callback.js","Recommendations.js","Myplaylists.js","App.js","reportWebVitals.js","index.js"],"names":["SpotifyPlayer","player","setPlayer","useState","deviceId","setDeviceId","error","setError","useEffect","token","localStorage","getItem","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","newPlayer","Spotify","Player","name","getOAuthToken","cb","volume","addListener","_ref","device_id","console","log","setItem","_ref2","message","_ref3","_ref4","_ref5","connect","then","success","React","style","padding","backgroundColor","color","Home","mood","setMood","playlist","setPlaylist","setMessage","playlistName","setPlaylistName","isListening","setIsListening","isNaming","setIsNaming","recommendations","setRecommendations","username","alert","location","href","ensureValidToken","expiryTime","now","Date","Number","refreshToken","res","axios","post","refresh_token","access_token","data","err","refreshSpotifyToken","fetchPlaylist","trim","_response$data","_response$data$playli","spotifyToken","userId","payload","charAt","toUpperCase","slice","songs","createdByVoice","voiceCommand","response","headers","Authorization","_err$response","_err$response$data","playTrack","fetch","method","JSON","stringify","uris","uri","className","background","marginRight","role","aria-label","onClick","handleLogout","removeItem","type","placeholder","value","onChange","e","target","startListening","SpeechRecognition","webkitSpeechRecognition","recognition","lang","onstart","onresult","transcript","event","results","predictedMood","classifyMood","onerror","onend","start","disabled","map","track","index","key","marginBottom","display","alignItems","albumImage","alt","width","height","borderRadius","flex","url","rel","textDecoration","artist","spotify_uri","marginTop","length","Fragment","startNamingByVoice","marginLeft","spotifyUserId","_track$url","match","filter","Boolean","_created$external_url","createRes","description","public","created","json","ok","id","open","external_urls","spotify","_topTracksData$items","getValidSeedTracks","trackIds","valid","tracks","push","warn","status","topTracksRes","topTracksText","text","topTracksData","parse","rawSeedTracks","items","validSeedTracks","recRes","join","recText","recData","Array","isArray","_track$artists$","_track$album$images$","artists","album","images","VoiceCommand","onMoodDetected","startRecognition","interimResults","SpotifyLogin","REDIRECT_URI","hostname","SCOPES","textAlign","clear","codeVerifier","arguments","undefined","possible","i","Math","floor","random","generateCodeVerifier","codeChallenge","TextEncoder","encode","digest","crypto","subtle","btoa","String","fromCharCode","Uint8Array","replace","generateCodeChallenge","params","URLSearchParams","response_type","client_id","scope","redirect_uri","code_challenge_method","code_challenge","toString","Callback","navigate","useNavigate","code","search","get","exchangeRes","code_verifier","expires_in","expiresAt","profileRes","profile","email","display_name","moodifyRes","exchangeToken","Recommendations","rawSeeds","getValidSeeds","seeds","_data$tracks","fetchRecommendations","verticalAlign","MyPlaylists","playlists","setPlaylists","loading","setLoading","fetchUserPlaylists","borderBottom","paddingBottom","isoString","date","toLocaleDateString","toLocaleTimeString","formatDate","createdAt","song","delete","playlistId","p","_id","handleDelete","border","confirm","App","isAuthenticated","Router","Routes","Route","path","element","Navigate","to","Myplaylists","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.75028413.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst SpotifyPlayer = () => {\n  const [player, setPlayer] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [error, setError] = useState(null); // 🆕\n\n  useEffect(() => {\n    const token = localStorage.getItem('spotify_token');\n    if (!token) return;\n\n    const script = document.createElement('script');\n    script.src = 'https://sdk.scdn.co/spotify-player.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const newPlayer = new window.Spotify.Player({\n        name: 'Moodify Player',\n        getOAuthToken: cb => cb(token),\n        volume: 0.5,\n      });\n\n      newPlayer.addListener('ready', ({ device_id }) => {\n        console.log('✅ Spotify player ready with device ID:', device_id);\n        localStorage.setItem('device_id', device_id);\n        setDeviceId(device_id);\n      });\n\n      newPlayer.addListener('initialization_error', ({ message }) => {\n        console.error('Initialization Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.addListener('authentication_error', ({ message }) => {\n        console.error('Auth Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.addListener('account_error', ({ message }) => {\n        console.error('Account Error:', message);\n        setError(\"This feature requires Spotify Premium.\");\n      });\n\n      newPlayer.addListener('playback_error', ({ message }) => {\n        console.error('Playback Error:', message);\n        setError(message); // 🆕\n      });\n\n      newPlayer.connect().then(success => {\n        if (!success) {\n          console.error(\"❌ Player connection failed (likely no Premium).\");\n          setError(\"Spotify Web Playback only works with Premium accounts.\");\n        }\n      });\n\n      setPlayer(newPlayer);\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: \"10px\", backgroundColor: \"#222\", color: \"#fff\" }}>\n      <p>🎵 Spotify Web Playback Initialized</p>\n      {error ? (\n        <p style={{ color: \"red\" }}>⚠️ {error}</p>\n      ) : deviceId ? (\n        <p>Device ID: {deviceId}</p>\n      ) : (\n        <p>Waiting for device ID...</p>\n      )}\n    </div>\n  );\n};\n\nexport default SpotifyPlayer;\n\n\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Home.css\";\nimport SpotifyPlayer from \"./SpotifyPlayer\";\n\n// ✅ Token refresh helper\nasync function refreshSpotifyToken() {\n  const refreshToken = localStorage.getItem(\"spotify_refresh_token\");\n\n  try {\n    const res = await axios.post(\n      \"https://moodify-i9qm.onrender.com/api/auth/refresh-token\",\n      { refresh_token: refreshToken }\n    );\n\n    const { access_token } = res.data;\n    localStorage.setItem(\"spotify_token\", access_token);\n    return access_token;\n  } catch (err) {\n    console.error(\"Failed to refresh token:\", err);\n    alert(\"Spotify session expired. Please log in again.\");\n    window.location.href = \"/\";\n  }\n}\n\nconst Home = () => {\n  const [mood, setMood] = useState(\"\");\n  const [playlist, setPlaylist] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [isNaming, setIsNaming] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n\n  const username = localStorage.getItem(\"username\");\n\n  useEffect(() => {\n    const spotifyToken = localStorage.getItem(\"spotify_token\");\n    if (!spotifyToken) {\n      alert(\"Spotify login failed. Please try again.\");\n      window.location.href = \"/\";\n    }\n  }, []); // Removed the extra closing brace here\n\n  const ensureValidToken = async () => {\n    let token = localStorage.getItem(\"spotify_token\");\n    const expiryTime = localStorage.getItem(\"spotify_token_expires_at\");\n    const now = Date.now();\n\n    if (!token || !expiryTime || now >= Number(expiryTime)) {\n      token = await refreshSpotifyToken();\n    }\n    return token;\n  };\n  \n  const fetchPlaylist = async (mood) => {\n    if (!mood.trim()) {\n      setMessage(\"Please enter a mood first.\");\n      return;\n    }\n  \n    try {\n      const token = localStorage.getItem(\"token\");\n      const spotifyToken = await ensureValidToken();\n      const userId = localStorage.getItem(\"user_id\");\n  \n      // Build the payload and log it for debugging purposes.\n      const payload = {\n        name: `Moodify - ${mood.charAt(0).toUpperCase() + mood.slice(1)} Vibes`,\n        songs: [],\n        mood,\n        createdByVoice: false,\n        voiceCommand: \"\",\n        userId,\n      };\n  \n      console.log(\"Sending payload to generate playlist:\", payload);\n  \n      const response = await axios.post(\n        \"https://moodify-i9qm.onrender.com/api/playlist/generate\",\n        payload,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"x-spotify-token\": spotifyToken,\n          },\n        }\n      );\n  \n      console.log(\"Playlist response:\", response.data);\n      setPlaylist(response.data?.playlist?.songs || []);\n      setMessage(\"\");\n    } catch (err) {\n      console.error(\"Error generating playlist:\", err.response || err);\n      setMessage(err.response?.data?.error || \"Failed to generate playlist.\");\n    }\n  };\n  \n\n  // Dummy classifyMood function for demonstration purposes.\n  // Replace this function with your actual implementation.\n  const classifyMood = async (transcript) => {\n    return transcript.trim();\n  };\n\n  const startListening = () => {\n    try {\n      const SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        setMessage(\"Speech recognition is not supported in your browser.\");\n        return;\n      }\n      \n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n\n      recognition.onstart = () => setIsListening(true);\n\n      recognition.onresult = async (event) => {\n        const transcript = event.results[0][0].transcript;\n        setMood(transcript);\n\n        // ✅ Classify mood using your Python ML API\n        const predictedMood = await classifyMood(transcript);\n        if (!predictedMood) {\n          setMessage(\"Unable to determine mood. Try again.\");\n          return;\n        }\n\n        fetchPlaylist(predictedMood);\n      };\n\n      recognition.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event);\n        setMessage(`Speech recognition error: ${event.error}`);\n      };\n\n      recognition.onend = () => setIsListening(false);\n\n      recognition.start();\n    } catch (err) {\n      console.error(\"Speech recognition failed:\", err);\n      setMessage(\"Speech recognition not supported or blocked.\");\n    }\n  };\n\n  const startNamingByVoice = () => {\n    try {\n      const SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        setMessage(\"Speech recognition is not supported in your browser.\");\n        return;\n      }\n\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.start();\n\n      recognition.onstart = () => setIsNaming(true);\n\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setPlaylistName(transcript);\n      };\n\n      recognition.onerror = (event) => {\n        console.error(\"Voice naming error:\", event);\n        setMessage(`Voice naming error: ${event.error}`);\n      };\n\n      recognition.onend = () => setIsNaming(false);\n    } catch (err) {\n      console.error(\"Voice naming failed:\", err);\n      setMessage(\"Voice naming not supported or blocked.\");\n    }\n  };\n\n  const playTrack = async (uri) => {\n    const token = localStorage.getItem(\"spotify_token\");\n    const deviceId = localStorage.getItem(\"device_id\");\n    if (!token || !deviceId) {\n      alert(\"Spotify is not connected.\");\n      return;\n    }\n    try {\n      await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ uris: [uri] }),\n      });\n    } catch (err) {\n      console.error(\"Error playing track:\", err);\n      alert(\"Playback failed. Make sure Spotify is open and logged in.\");\n    }\n  };\n\n  const savePlaylist = async () => {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"user_id\");\n\n    if (!playlist.length) {\n      alert(\"Please generate a playlist first.\");\n      return;\n    }\n\n    try {\n      await axios.post(\n        \"https://moodify-i9qm.onrender.com/api/playlist/save\",\n        {\n          name: playlistName,\n          songs: playlist,\n          mood,\n          userId,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      alert(\"Playlist saved successfully!\");\n      setPlaylistName(\"\");\n    } catch (err) {\n      console.error(\"Failed to save playlist:\", err);\n      alert(\"Failed to save playlist.\");\n    }\n  };\n\n  const saveToSpotify = async () => {\n    const token = localStorage.getItem(\"spotify_token\");\n    const spotifyUserId = localStorage.getItem(\"spotify_user_id\");\n\n    if (!playlistName || playlist.length === 0) {\n      alert(\"Please generate and name a playlist first.\");\n      return;\n    }\n\n    // 🔍 Log here\n    console.log(\"🎵 Playlist being sent to Spotify:\", playlist);\n\n    const uris = playlist\n      .map((track) => {\n        const match = track.url?.match(/track\\/([a-zA-Z0-9]+)/);\n        return match ? `spotify:track:${match[1]}` : null;\n      })\n      .filter(Boolean);\n\n    // 🔍 Log URIs\n    console.log(\"🎯 Extracted URIs:\", uris);\n\n    if (uris.length === 0) {\n      alert(\"No valid tracks to add. Please regenerate playlist.\");\n      return;\n    }\n\n    try {\n      // Step 1: Create the playlist\n      const createRes = await fetch(\n        `https://api.spotify.com/v1/users/${spotifyUserId}/playlists`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            name: playlistName,\n            description: \"Created with Moodify 🎵\",\n            public: false,\n          }),\n        }\n      );\n\n      const created = await createRes.json();\n\n      if (!createRes.ok || !created.id) {\n        console.error(\"Spotify playlist creation failed:\", created);\n        alert(\"Spotify playlist creation failed.\");\n        return;\n      }\n\n      // Step 2: Add tracks\n      await fetch(\n        `https://api.spotify.com/v1/playlists/${created.id}/tracks`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ uris }),\n        }\n      );\n\n      alert(\"✅ Playlist saved to your Spotify account!\");\n      window.open(created.external_urls?.spotify || \"https://open.spotify.com\", \"_blank\");\n    } catch (err) {\n      console.error(\"❌ Failed to sync to Spotify:\", err);\n      alert(\"Failed to save playlist to Spotify.\");\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\");\n    localStorage.removeItem(\"spotify_token\");\n    localStorage.removeItem(\"user_id\");\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <div className=\"container\">\n      <SpotifyPlayer />\n\n      {/* 🧭 Navigation Menu */}\n      <nav style={{ background: \"#1DB954\", padding: \"10px\" }}>\n        <a href=\"/home\" style={{ color: \"#fff\", marginRight: \"15px\" }}>\n          Home\n        </a>\n        <a href=\"/recommendations\" style={{ color: \"#fff\", marginRight: \"15px\" }}>\n          Recommendations\n        </a>\n        <a href=\"/playlists\" style={{ color: \"#fff\" }}>\n          My Playlists\n        </a>\n      </nav>\n\n      <h1>Welcome to Moodify!</h1>\n      {username && (\n        <h2>\n          Login with Spotify to start Moodify{\" \"}\n          <span role=\"img\" aria-label=\"headphone\">\n            🎧\n          </span>\n        </h2>\n      )}\n      <button onClick={handleLogout}>Logout</button>\n\n      <div>\n        <h2>Generate Playlist</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your mood (e.g., happy, sad)\"\n          value={mood}\n          onChange={(e) => setMood(e.target.value)}\n        />\n        <button onClick={() => fetchPlaylist(mood)}>Generate Playlist</button>\n      </div>\n\n      <div>\n        <button onClick={startListening} disabled={isListening}>\n          {isListening ? \"Listening...\" : \"Speak Your Mood\"}\n        </button>\n      </div>\n\n      <h3>Playlist:</h3>\n      {message && <p>{message}</p>}\n      <ul>\n        {playlist.map((track, index) => (\n          <li\n            key={index}\n            style={{\n              marginBottom: \"12px\",\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            {track.albumImage && (\n              <img\n                src={track.albumImage}\n                alt=\"Album Cover\"\n                width=\"50\"\n                height=\"50\"\n                style={{ borderRadius: \"5px\", marginRight: \"10px\" }}\n              />\n            )}\n            <div style={{ flex: 1 }}>\n              <a\n                href={track.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n              >\n                {track.name} <span style={{ color: \"#555\" }}>– {track.artist}</span>\n              </a>\n              {track.spotify_uri && (\n                <div>\n                  <button onClick={() => playTrack(track.spotify_uri)} style={{ marginTop: \"5px\" }}>\n                    ▶️ Play in Moodify\n                  </button>\n                </div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      {playlist.length > 0 && (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Custom Playlist Name (optional)\"\n            value={playlistName}\n            onChange={(e) => setPlaylistName(e.target.value)}\n            style={{ marginTop: \"10px\", padding: \"8px\", width: \"80%\" }}\n          />\n          <button\n            onClick={startNamingByVoice}\n            disabled={isNaming}\n            style={{ marginLeft: \"10px\", padding: \"8px\" }}\n          >\n            🎤 {isNaming ? \"Listening...\" : \"Name by Voice\"}\n          </button>\n\n          <br />\n          <button onClick={savePlaylist} style={{ marginTop: \"10px\" }}>\n            <span role=\"img\" aria-label=\"save\">\n              💾\n            </span>{\" \"}\n            Save this Playlist\n          </button>\n\n          <br />\n          <button onClick={saveToSpotify} style={{ marginTop: \"10px\" }}>\n            💚 Save to Spotify\n          </button>\n        </>\n      )}\n\n      <h3>Recommended for You</h3>\n      <button\n        onClick={async () => {\n          try {\n            const token = localStorage.getItem(\"spotify_token\");\n\n            // ✅ New validation logic: test each track with /recommendations\n            const getValidSeedTracks = async (trackIds, token) => {\n              const valid = [];\n\n              for (const id of trackIds) {\n                const res = await fetch(\n                  `https://api.spotify.com/v1/recommendations?seed_tracks=${id}&limit=1`,\n                  {\n                    headers: { Authorization: `Bearer ${token}` },\n                  }\n                );\n\n                if (res.ok) {\n                  const data = await res.json();\n                  if (data.tracks && data.tracks.length > 0) {\n                    valid.push(id);\n                  } else {\n                    console.warn(`⚠️ No recommendations for seed track: ${id}`);\n                  }\n                } else {\n                  console.warn(`❌ Track not valid for recommendations: ${id} - Status ${res.status}`);\n                }\n\n                if (valid.length >= 3) break; // Spotify allows max 5 seeds, we limit to 3\n              }\n\n              return valid;\n            };\n\n            // Step 1: Get user's top tracks\n            const topTracksRes = await fetch(\"https://api.spotify.com/v1/me/top/tracks?limit=5\", {\n              headers: { Authorization: `Bearer ${token}` },\n            });\n\n            const topTracksText = await topTracksRes.text();\n\n            if (!topTracksRes.ok) {\n              console.error(\"❌ Top tracks fetch failed:\", topTracksRes.status, topTracksText);\n              setMessage(\"Failed to fetch top tracks.\");\n              return;\n            }\n\n            let topTracksData;\n            try {\n              topTracksData = JSON.parse(topTracksText);\n            } catch (e) {\n              console.error(\"❌ Failed to parse top tracks JSON:\", e, topTracksText);\n              setMessage(\"Error parsing top tracks from Spotify.\");\n              return;\n            }\n\n            const rawSeedTracks = topTracksData.items?.map((track) => track.id) || [];\n            console.log(\"🎯 Raw seed tracks:\", rawSeedTracks);\n\n            if (rawSeedTracks.length === 0) {\n              setMessage(\"No top tracks found. Please listen to more songs on Spotify.\");\n              return;\n            }\n\n            // Step 2: Validate recommendation capability\n            const validSeedTracks = await getValidSeedTracks(rawSeedTracks, token);\n            console.log(\"✅ Valid recommendation seeds:\", validSeedTracks);\n\n            if (validSeedTracks.length === 0) {\n              setMessage(\"No valid tracks found for recommendations. Try listening to more music on Spotify.\");\n              return;\n            }\n\n            // Step 3: Fetch recommendations\n            const recRes = await fetch(\n              `https://api.spotify.com/v1/recommendations?seed_tracks=${validSeedTracks.join(\",\")}&limit=10`,\n              {\n                headers: { Authorization: `Bearer ${token}` },\n              }\n            );\n\n            const recText = await recRes.text();\n\n            if (!recRes.ok) {\n              console.error(\"❌ Recommendations fetch failed:\", recRes.status, recText);\n              setMessage(\"Failed to fetch recommendations.\");\n              return;\n            }\n\n            let recData;\n            try {\n              recData = JSON.parse(recText);\n            } catch (e) {\n              console.error(\"❌ Failed to parse recommendations JSON:\", e, recText);\n              setMessage(\"Error parsing recommendations from Spotify.\");\n              return;\n            }\n\n            console.log(\"🎁 Final Recommendations:\", recData);\n\n            setRecommendations(\n              Array.isArray(recData.tracks)\n                ? recData.tracks.map((track) => ({\n                    name: track.name,\n                    artist: track.artists[0]?.name || \"Unknown\",\n                    albumImage: track.album.images[0]?.url || \"\",\n                    url: track.external_urls.spotify,\n                    spotify_uri: track.uri,\n                  }))\n                : []\n            );\n          } catch (err) {\n            console.error(\"💥 Recommendation fetch failed:\", err);\n            setMessage(\"Failed to fetch recommendations.\");\n          }\n        }}\n      >\n        <span role=\"img\" aria-label=\"target\">\n          🎯\n        </span>{\" \"}\n        Show Personalized Recommendations\n      </button>\n\n      <ul>\n        {recommendations.map((track, index) => (\n          <li\n            key={index}\n            style={{\n              marginBottom: \"12px\",\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            {track.albumImage && (\n              <img\n                src={track.albumImage}\n                alt=\"Album Cover\"\n                width=\"50\"\n                height=\"50\"\n                style={{ borderRadius: \"5px\", marginRight: \"10px\" }}\n              />\n            )}\n            <div style={{ flex: 1 }}>\n              <a\n                href={track.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n              >\n                {track.name}{\" \"}\n                <span style={{ color: \"#555\" }}>– {track.artist}</span>\n              </a>\n              {track.spotify_uri && (\n                <div>\n                  <button onClick={() => playTrack(track.spotify_uri)} style={{ marginTop: \"5px\" }}>\n                    <span role=\"img\" aria-label=\"target\">\n                      ▶️\n                    </span>{\" \"}\n                    Play in Moodify\n                  </button>\n                </div>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\n\nconst VoiceCommand = ({ onMoodDetected }) => {\n    const [isListening, setIsListening] = useState(false);\n\n    const startRecognition = () => {\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n        recognition.lang = 'en-US';\n        recognition.interimResults = false;\n        recognition.start();\n\n        recognition.onstart = () => setIsListening(true);\n        recognition.onend = () => setIsListening(false);\n        recognition.onresult = (event) => {\n            const mood = event.results[0][0].transcript;\n            onMoodDetected(mood);\n        };\n    };\n\n    return (\n        <div>\n            <button onClick={startRecognition} disabled={isListening}>\n                {isListening ? \"Listening...\" : \"Start Voice Command\"}\n            </button>\n        </div>\n    );\n};\n\nexport default VoiceCommand;\n","/* // src/components/SpotifyLogin.js\nimport React, { useEffect } from \"react\";\n\nconst SpotifyLogin = () => {\n  const CLIENT_ID = \"cdea26e7b85149eeb1e02a6812690634\"; // ✅ Replace with process.env var in future if bundling securely\n  const REDIRECT_URI =\n    window.location.hostname === \"localhost\"\n      ? \"http://localhost:3000/callback\"\n      : \"https://moodify-i9qm.onrender.com/callback\";\n\n      const SCOPES = [\n        \"user-read-email\",\n        \"user-read-private\",\n        \"user-top-read\",\n        \"user-read-playback-state\",\n        \"user-modify-playback-state\",\n        \"streaming\",\n        \"playlist-modify-public\",\n        \"playlist-modify-private\"\n      ];\n      \n\n  // 🔐 Generates a random code_verifier\n  const generateCodeVerifier = (length = 128) => {\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let text = \"\";\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  // 🔐 Hash the verifier to generate a code_challenge\n  const generateCodeChallenge = async (codeVerifier) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await crypto.subtle.digest(\"SHA-256\", data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n  };\n\n  const handleLogin = async () => {\n    // ✅ Clear all old tokens from local storage\n    localStorage.clear();\n  \n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    localStorage.setItem(\"code_verifier\", codeVerifier); // ✅ Store for use in callback\n  \n    const args = new URLSearchParams({\n      response_type: \"code\",\n      client_id: CLIENT_ID,\n      scope: SCOPES.join(\" \"),\n      redirect_uri: REDIRECT_URI,\n      code_challenge_method: \"S256\",\n      code_challenge: codeChallenge,\n    });\n  \n    window.location = `https://accounts.spotify.com/authorize?${args.toString()}`;\n  };\n  \n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h2>\n        Login with Spotify to start Moodify{\" \"}\n        <span role=\"img\" aria-label=\"headphone\">🎧</span>\n      </h2>\n      <button\n        style={{ padding: \"10px 20px\", marginTop: \"20px\" }}\n        onClick={handleLogin}\n      >\n        Login with Spotify\n      </button>\n    </div>\n  );\n};\n\nexport default SpotifyLogin;\n*/\n\n// src/components/SpotifyLogin.js\nimport React from \"react\";\n\nconst SpotifyLogin = () => {\n  const CLIENT_ID = \"cdea26e7b85149eeb1e02a6812690634\"; // Use env var in future\n  const REDIRECT_URI =\n    window.location.hostname === \"localhost\"\n      ? \"http://localhost:3000/callback\"\n      : \"https://moodify-i9qm.onrender.com/callback\";\n\n  const SCOPES = [\n    \"user-read-email\",\n    \"user-read-private\",\n    \"user-top-read\",\n    \"user-read-playback-state\",\n    \"user-modify-playback-state\",\n    \"streaming\",\n    \"playlist-modify-public\",\n    \"playlist-modify-private\"\n  ];\n\n  const generateCodeVerifier = (length = 128) => {\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let text = \"\";\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  const generateCodeChallenge = async (codeVerifier) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest(\"SHA-256\", data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n  };\n\n  const handleLogin = async () => {\n    // ✅ Reset all previous auth tokens and data\n    localStorage.clear();\n\n    const codeVerifier = generateCodeVerifier();\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    localStorage.setItem(\"code_verifier\", codeVerifier);\n\n    const params = new URLSearchParams({\n      response_type: \"code\",\n      client_id: CLIENT_ID,\n      scope: SCOPES.join(\" \"),\n      redirect_uri: REDIRECT_URI,\n      code_challenge_method: \"S256\",\n      code_challenge: codeChallenge,\n    });\n\n    // ✅ Redirect to Spotify auth\n    window.location.href = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h2>\n        Login with Spotify to start Moodify{\" \"}\n        <span role=\"img\" aria-label=\"headphone\">🎧</span>\n      </h2>\n      <button\n        style={{ padding: \"10px 20px\", marginTop: \"20px\" }}\n        onClick={handleLogin}\n      >\n        Login with Spotify\n      </button>\n    </div>\n  );\n};\n\nexport default SpotifyLogin;\n","/* // src/components/Callback.js\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst Callback = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    const codeVerifier = localStorage.getItem(\"code_verifier\");\n\n    if (!code || !codeVerifier) {\n      alert(\"Missing authorization code or verifier. Please try logging in again.\");\n      return navigate(\"/\");\n    }\n\n    const exchangeToken = async () => {\n      try {\n        // Step 1: Exchange code + verifier for access token\n        const exchangeRes = await axios.post(\"https://moodify-i9qm.onrender.com/api/auth/exchange-token\", {\n          code,\n          code_verifier: codeVerifier\n        });\n\n        const { access_token, refresh_token } = exchangeRes.data;\nlocalStorage.setItem(\"spotify_token\", access_token);\nlocalStorage.setItem(\"spotify_refresh_token\", refresh_token);\nconst expiresIn = exchangeRes.data.expires_in; // seconds\nconst expiresAt = Date.now() + expiresIn * 1000; // milliseconds\nlocalStorage.setItem(\"spotify_token_expires_at\", expiresAt.toString());\n\n\n        console.log(\"✅ Spotify Access Token:\", access_token);\n\n\n        // Step 2: Get user profile from Spotify\n        const profileRes = await fetch(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n          },\n        });\n\n        const profile = await profileRes.json();\n        const { email, display_name, id: spotifyUserId } = profile;\n        localStorage.setItem(\"spotify_user_id\", spotifyUserId);\n\n        // Step 3: Log in/register in Moodify backend\n        const moodifyRes = await axios.post(\"https://moodify-i9qm.onrender.com/api/auth/spotify-login\", {\n          email,\n          name: display_name || \"Spotify User\",\n        });\n\n        const { token, username, userId } = moodifyRes.data;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"user_id\", userId);\n\n        navigate(\"/home\");\n      } catch (err) {\n        console.error(\"Authentication error:\", err.response?.data || err);\n        alert(\"Spotify authentication failed.\");\n        navigate(\"/\");\n      }\n    };\n\n    exchangeToken();\n  }, [navigate]);\n\n  return <p style={{ textAlign: \"center\", color: \"green\" }}>Authenticating with Spotify...</p>;\n};\n\nexport default Callback;\n*/\n\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst Callback = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    const codeVerifier = localStorage.getItem(\"code_verifier\");\n\n    if (!code || !codeVerifier) {\n      alert(\"Missing authorization code or verifier. Please try logging in again.\");\n      return navigate(\"/\");\n    }\n\n    const exchangeToken = async () => {\n      try {\n        const exchangeRes = await axios.post(\"https://moodify-i9qm.onrender.com/api/auth/exchange-token\", {\n          code,\n          code_verifier: codeVerifier\n        });\n\n        const { access_token, refresh_token, expires_in } = exchangeRes.data;\n        const expiresAt = Date.now() + expires_in * 1000;\n\n        // ✅ Use consistent naming across frontend and backend\n        localStorage.setItem(\"spotify_access_token\", access_token);\n        localStorage.setItem(\"spotify_refresh_token\", refresh_token);\n        localStorage.setItem(\"spotify_token_expires_at\", expiresAt.toString());\n\n        console.log(\"✅ Spotify Access Token:\", access_token);\n\n        // ✅ Fetch Spotify user profile\n        const profileRes = await fetch(\"https://api.spotify.com/v1/me\", {\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n          },\n        });\n\n        const profile = await profileRes.json();\n        const { email, display_name, id: spotifyUserId } = profile;\n        localStorage.setItem(\"spotify_user_id\", spotifyUserId);\n\n        // ✅ Login or register with Moodify backend\n        const moodifyRes = await axios.post(\"https://moodify-i9qm.onrender.com/api/auth/spotify-login\", {\n          email,\n          name: display_name || \"Spotify User\",\n        });\n\n        const { token, username, userId } = moodifyRes.data;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"username\", username);\n        localStorage.setItem(\"user_id\", userId);\n\n        navigate(\"/home\");\n      } catch (err) {\n        console.error(\"Authentication error:\", err.response?.data || err);\n        alert(\"Spotify authentication failed.\");\n        navigate(\"/\");\n      }\n    };\n\n    exchangeToken();\n  }, [navigate]);\n\n  return <p style={{ textAlign: \"center\", color: \"green\" }}>Authenticating with Spotify...</p>;\n};\n\nexport default Callback;\n","import React, { useEffect, useState } from \"react\";\n\nconst Recommendations = () => {\n  const [recommendations, setRecommendations] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    const fetchRecommendations = async () => {\n      const token = localStorage.getItem(\"spotify_token\");\n      if (!token) {\n        setMessage(\"Please log in with Spotify first.\");\n        return;\n      }\n\n      try {\n        // Step 1: Fetch top tracks\n        const topTracksRes = await fetch(\"https://api.spotify.com/v1/me/top/tracks?limit=5\", {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        const topTracksData = await topTracksRes.json();\n        const rawSeeds = topTracksData.items?.map((track) => track.id) || [];\n\n        if (rawSeeds.length === 0) {\n          setMessage(\"No top tracks found. Listen to more songs on Spotify.\");\n          return;\n        }\n\n        // Step 2: Validate usable seed tracks\n        const getValidSeeds = async (seeds) => {\n          const valid = [];\n          for (const id of seeds) {\n            const res = await fetch(\n              `https://api.spotify.com/v1/recommendations?seed_tracks=${id}&limit=1`,\n              { headers: { Authorization: `Bearer ${token}` } }\n            );\n            const data = await res.json();\n            if (res.ok && data.tracks?.length > 0) valid.push(id);\n            if (valid.length >= 3) break;\n          }\n          return valid;\n        };\n\n        const validSeedTracks = await getValidSeeds(rawSeeds);\n        console.log(\"✅ Valid seeds:\", validSeedTracks);\n\n        if (validSeedTracks.length === 0) {\n          setMessage(\"No valid top tracks for generating recommendations. Try again later.\");\n          return;\n        }\n\n        // Step 3: Fetch final recommendations\n        const recRes = await fetch(\n          `https://api.spotify.com/v1/recommendations?seed_tracks=${validSeedTracks.join(\",\")}&limit=10`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n\n        if (!recRes.ok) {\n          const text = await recRes.text();\n          console.error(\"❌ Recommendations failed:\", text);\n          setMessage(\"Failed to load recommendations. Spotify token might be expired.\");\n          return;\n        }\n\n        const recData = await recRes.json();\n        setRecommendations(recData.tracks || []);\n        if (!recData.tracks || recData.tracks.length === 0) {\n          setMessage(\"No recommendations available at the moment.\");\n        }\n      } catch (err) {\n        console.error(\"💥 Unexpected error:\", err);\n        setMessage(\"Error loading recommendations. Try refreshing.\");\n      }\n    };\n\n    fetchRecommendations();\n  }, []);\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <h2>🎧 Recommended For You</h2>\n      {message && <p style={{ color: \"red\" }}>{message}</p>}\n      <ul>\n        {recommendations.map((track) => (\n          <li key={track.id} style={{ marginBottom: \"10px\" }}>\n            <img\n              src={track.album.images[0]?.url}\n              alt=\"cover\"\n              width=\"50\"\n              style={{ marginRight: \"10px\", verticalAlign: \"middle\" }}\n            />\n            <a\n              href={track.external_urls.spotify}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              style={{ textDecoration: \"none\", color: \"#1DB954\" }}\n            >\n              {track.name} - {track.artists[0].name}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Recommendations;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst MyPlaylists = () => {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const userId = localStorage.getItem(\"user_id\");\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    const fetchUserPlaylists = async () => {\n      try {\n        const res = await axios.get(`https://moodify-i9qm.onrender.com/api/playlist/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        console.log(\"🎧 Fetched playlists:\", res.data);\n\n        // Ensure it's an array\n        setPlaylists(Array.isArray(res.data) ? res.data : []);\n      } catch (error) {\n        console.error(\"Error fetching user playlists:\", error);\n        setPlaylists([]); // fallback\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userId && token) {\n      fetchUserPlaylists();\n    }\n  }, [userId, token]);\n\n  const handleDelete = async (playlistId) => {\n    try {\n      await axios.delete(`https://moodify-i9qm.onrender.com/${playlistId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setPlaylists(playlists.filter((p) => p._id !== playlistId));\n    } catch (err) {\n      console.error(\"Failed to delete playlist:\", err);\n    }\n  };\n\n  const handleClearAll = async () => {\n    if (!window.confirm(\"Are you sure you want to delete all playlists?\")) return;\n\n    try {\n      await axios.delete(`https://moodify-i9qm.onrender.com/${userId}/clear`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setPlaylists([]);\n    } catch (err) {\n      console.error(\"Failed to clear playlists:\", err);\n    }\n  };\n\n  const formatDate = (isoString) => {\n    const date = new Date(isoString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  };\n\n  return (\n    <div className=\"container\">\n      <h2><span role=\"img\" aria-label=\"music\">🎵</span> My Saved Playlists</h2>\n      {loading ? (\n        <p>Loading playlists...</p>\n      ) : playlists.length === 0 ? (\n        <p>No playlists found.</p>\n      ) : (\n        <>\n          {playlists.map((playlist, index) => (\n            <div key={index} style={{ marginBottom: \"20px\", borderBottom: \"1px solid #ccc\", paddingBottom: \"10px\" }}>\n              <h3>{playlist.name}</h3>\n              <p><strong>Created:</strong> {formatDate(playlist.createdAt)}</p>\n              <ul>\n                {Array.isArray(playlist.songs) && playlist.songs.length > 0 ? (\n                  playlist.songs.map((song, i) => (\n                    <li key={i}>\n                      <a href={song.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {song.name} - {song.artist}\n                      </a>\n                    </li>\n                  ))\n                ) : (\n                  <li>No songs in this playlist.</li>\n                )}\n              </ul>\n              <button\n                onClick={() => handleDelete(playlist._id)}\n                style={{ backgroundColor: '#dc3545', color: '#fff', padding: '5px 10px', border: 'none' }}\n              >\n                <span role=\"img\" aria-label=\"delete\">🗑️</span> Delete\n              </button>\n            </div>\n          ))}\n          <button\n            onClick={handleClearAll}\n            style={{ backgroundColor: '#dc3545', color: '#fff', padding: '8px 15px', border: 'none', marginTop: '10px' }}\n          >\n            <span role=\"img\" aria-label=\"clear\">❌</span> Clear All\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MyPlaylists;\n","/* import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport VoiceCommand from \"./voicecommand\";\nimport SpotifyLogin from \"./SpotifyLogin\"; // make sure no space!\nimport Callback from \"./Callback\";\nimport Recommendations from \"./Recommendations\"; \nimport Myplaylists from \"./Myplaylists\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <h1>Moodify: AI Playlist Generator</h1>\n        <Routes>\n  <Route path=\"/\" element={<SpotifyLogin />} />\n  <Route path=\"/callback\" element={<Callback />} />\n  <Route path=\"/home\" element={<Home />} />\n  <Route path=\"/voicecommand\" element={<VoiceCommand />} />\n  <Route path=\"/recommendations\" element={<Recommendations />} />\n  <Route path=\"/playlists\" element={<Myplaylists />} />\n</Routes>\n\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n*/\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport Home from \"./home\";\nimport VoiceCommand from \"./voicecommand\";\nimport SpotifyLogin from \"./SpotifyLogin\";\nimport Callback from \"./Callback\";\nimport Recommendations from \"./Recommendations\";\nimport Myplaylists from \"./Myplaylists\";\n\nconst App = () => {\n  const isAuthenticated = !!localStorage.getItem(\"token\");\n\n  return (\n    <Router>\n      <div>\n        <h1 style={{ textAlign: \"center\", marginTop: \"20px\" }}>Moodify: AI Playlist Generator 🎧</h1>\n        <Routes>\n          <Route path=\"/\" element={<SpotifyLogin />} />\n          <Route path=\"/callback\" element={<Callback />} />\n\n          {/* 🔒 Protect app routes */}\n          <Route\n            path=\"/home\"\n            element={isAuthenticated ? <Home /> : <Navigate to=\"/\" />}\n          />\n          <Route\n            path=\"/voicecommand\"\n            element={isAuthenticated ? <VoiceCommand /> : <Navigate to=\"/\" />}\n          />\n          <Route\n            path=\"/recommendations\"\n            element={isAuthenticated ? <Recommendations /> : <Navigate to=\"/\" />}\n          />\n          <Route\n            path=\"/playlists\"\n            element={isAuthenticated ? <Myplaylists /> : <Navigate to=\"/\" />}\n          />\n\n          {/* 🚫 Optional: 404 route */}\n          <Route path=\"*\" element={<p style={{ textAlign: \"center\" }}>404 - Page not found</p>} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}